# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'parameter_tuning.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from itertools import product

import numpy as np
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QFileDialog
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar

from Algorithms.Function import Algorithms, Sampling
from equation_window import UIEquationWindow
from graphics import TuningGraphic
from gui.scripts.alerts import showCritical, showWarning
from workers import Worker, TuningWorker


class UITuningWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(UITuningWindow, self).__init__()

        self.sampling = Sampling()

    def setupUi(self):
        self.setObjectName("mainWindow")
        self.resize(1300, 720)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.leftVLayout = QtWidgets.QVBoxLayout()
        self.leftVLayout.setObjectName("leftVLayout")
        self.inputGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.inputGroupBox.setObjectName("inputGroupBox")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.inputGroupBox)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.dataTreeWidget = QtWidgets.QTreeWidget(self.inputGroupBox)
        self.dataTreeWidget.setObjectName("dataTreeWidget")
        self.verticalLayout_7.addWidget(self.dataTreeWidget)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.loadPushButton = QtWidgets.QPushButton(self.inputGroupBox)
        self.loadPushButton.setObjectName("loadPushButton")
        self.horizontalLayout.addWidget(self.loadPushButton)
        spacerItem1 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_7.addLayout(self.horizontalLayout)
        self.leftVLayout.addWidget(self.inputGroupBox)
        self.algorithmGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.algorithmGroupBox.setObjectName("algorithmGroupBox")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.algorithmGroupBox)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.algorithmHLayout = QtWidgets.QHBoxLayout()
        self.algorithmHLayout.setObjectName("algorithmHLayout")
        self.algorithmComboBox = QtWidgets.QComboBox(self.algorithmGroupBox)
        self.algorithmComboBox.setObjectName("algorithmComboBox")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmHLayout.addWidget(self.algorithmComboBox)
        self.algorithmPushButton = QtWidgets.QPushButton(self.algorithmGroupBox)
        self.algorithmPushButton.setEnabled(True)
        self.algorithmPushButton.setAutoFillBackground(False)
        self.algorithmPushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("assets/icons/view.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.algorithmPushButton.setIcon(icon)
        self.algorithmPushButton.setObjectName("algorithmPushButton")
        self.algorithmHLayout.addWidget(self.algorithmPushButton)
        spacerItem2 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.algorithmHLayout.addItem(spacerItem2)
        self.maxiterLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.maxiterLabel.setObjectName("maxiterLabel")
        self.algorithmHLayout.addWidget(self.maxiterLabel)
        self.maxiterSpinBox = QtWidgets.QSpinBox(self.algorithmGroupBox)
        self.maxiterSpinBox.setMinimum(1)
        self.maxiterSpinBox.setMaximum(9999)
        self.maxiterSpinBox.setProperty("value", 100)
        self.maxiterSpinBox.setObjectName("maxiterSpinBox")
        self.algorithmHLayout.addWidget(self.maxiterSpinBox)
        self.verticalLayout_4.addLayout(self.algorithmHLayout)
        self.paramHLayout = QtWidgets.QHBoxLayout()
        self.paramHLayout.setObjectName("paramHLayout")
        self.paramTuningLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.paramTuningLabel.setObjectName("paramTuningLabel")
        self.paramHLayout.addWidget(self.paramTuningLabel)
        self.paramTuningComboBox = QtWidgets.QComboBox(self.algorithmGroupBox)
        self.paramTuningComboBox.setObjectName("paramTuningComboBox")
        self.paramTuningComboBox.addItem("")
        self.paramTuningComboBox.addItem("")
        self.paramHLayout.addWidget(self.paramTuningComboBox)
        self.verticalLayout_4.addLayout(self.paramHLayout)
        self.paramValueHLayout = QtWidgets.QHBoxLayout()
        self.paramValueHLayout.setObjectName("paramValueHLayout")
        self.paramLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.paramLabel.setObjectName("paramLabel")
        self.paramValueHLayout.addWidget(self.paramLabel)
        self.paramComboBox = QtWidgets.QComboBox(self.algorithmGroupBox)
        self.paramComboBox.setObjectName("paramComboBox")
        self.paramComboBox.addItem("")
        self.paramComboBox.addItem("")
        self.paramComboBox.addItem("")
        self.paramValueHLayout.addWidget(self.paramComboBox)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.paramValueHLayout.addItem(spacerItem3)
        self.paramValuesLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.paramValuesLabel.setObjectName("paramValuesLabel")
        self.paramValueHLayout.addWidget(self.paramValuesLabel)
        self.paramValuesSpinBox = QtWidgets.QSpinBox(self.algorithmGroupBox)
        self.paramValuesSpinBox.setSuffix("")
        self.paramValuesSpinBox.setPrefix("")
        self.paramValuesSpinBox.setMinimum(2)
        self.paramValuesSpinBox.setMaximum(999)
        self.paramValuesSpinBox.setStepType(QtWidgets.QAbstractSpinBox.DefaultStepType)
        self.paramValuesSpinBox.setObjectName("paramValuesSpinBox")
        self.paramValueHLayout.addWidget(self.paramValuesSpinBox)
        self.verticalLayout_4.addLayout(self.paramValueHLayout)
        self.algorithmHLine = QtWidgets.QFrame(self.algorithmGroupBox)
        self.algorithmHLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.algorithmHLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.algorithmHLine.setObjectName("algorithmHLine")
        self.verticalLayout_4.addWidget(self.algorithmHLine)
        self.param1HLayout = QtWidgets.QHBoxLayout()
        self.param1HLayout.setObjectName("param1HLayout")
        self.param1InitLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param1InitLabel.setText("")
        self.param1InitLabel.setPixmap(QtGui.QPixmap("assets/parameters/lambda_init.png"))
        self.param1InitLabel.setObjectName("param1InitLabel")
        self.param1HLayout.addWidget(self.param1InitLabel)
        self.param1InitLineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param1InitLineEdit.setObjectName("param1InitLineEdit")
        self.param1HLayout.addWidget(self.param1InitLineEdit)
        self.param1EndLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param1EndLabel.setText("")
        self.param1EndLabel.setPixmap(QtGui.QPixmap("assets/parameters/lambda_end.png"))
        self.param1EndLabel.setObjectName("param1EndLabel")
        self.param1HLayout.addWidget(self.param1EndLabel)
        self.param1EndLineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param1EndLineEdit.setObjectName("param1EndLineEdit")
        self.param1HLayout.addWidget(self.param1EndLineEdit)
        self.verticalLayout_4.addLayout(self.param1HLayout)
        self.param2HLayout = QtWidgets.QHBoxLayout()
        self.param2HLayout.setObjectName("param2HLayout")
        self.param2InitLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param2InitLabel.setText("")
        self.param2InitLabel.setPixmap(QtGui.QPixmap("assets/parameters/mu_init.png"))
        self.param2InitLabel.setObjectName("param2InitLabel")
        self.param2HLayout.addWidget(self.param2InitLabel)
        self.param2InitLineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param2InitLineEdit.setObjectName("param2InitLineEdit")
        self.param2HLayout.addWidget(self.param2InitLineEdit)
        self.param2EndLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param2EndLabel.setText("")
        self.param2EndLabel.setPixmap(QtGui.QPixmap("assets/parameters/mu_end.png"))
        self.param2EndLabel.setObjectName("param2EndLabel")
        self.param2HLayout.addWidget(self.param2EndLabel)
        self.param2EndLineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param2EndLineEdit.setObjectName("param2EndLineEdit")
        self.param2HLayout.addWidget(self.param2EndLineEdit)
        self.verticalLayout_4.addLayout(self.param2HLayout)
        self.param3HLayout = QtWidgets.QHBoxLayout()
        self.param3HLayout.setObjectName("param3HLayout")
        self.param3InitLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param3InitLabel.setText("")
        self.param3InitLabel.setPixmap(QtGui.QPixmap("assets/parameters/rho_init.png"))
        self.param3InitLabel.setObjectName("param3InitLabel")
        self.param3HLayout.addWidget(self.param3InitLabel)
        self.param3InitLineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param3InitLineEdit.setObjectName("param3InitLineEdit")
        self.param3HLayout.addWidget(self.param3InitLineEdit)
        self.param3EndLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param3EndLabel.setText("")
        self.param3EndLabel.setPixmap(QtGui.QPixmap("assets/parameters/rho_end.png"))
        self.param3EndLabel.setObjectName("param3EndLabel")
        self.param3HLayout.addWidget(self.param3EndLabel)
        self.param3EndLineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param3EndLineEdit.setObjectName("param3EndLineEdit")
        self.param3HLayout.addWidget(self.param3EndLineEdit)
        self.verticalLayout_4.addLayout(self.param3HLayout)
        self.leftVLayout.addWidget(self.algorithmGroupBox)
        self.samExpVLayout = QtWidgets.QVBoxLayout()
        self.samExpVLayout.setObjectName("samExpVLayout")
        self.samplingGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.samplingGroupBox.setObjectName("samplingGroupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.samplingGroupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.samplingHLayout = QtWidgets.QHBoxLayout()
        self.samplingHLayout.setObjectName("samplingHLayout")
        self.samplingTypeLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.samplingTypeLabel.setObjectName("samplingTypeLabel")
        self.samplingHLayout.addWidget(self.samplingTypeLabel)
        self.samplingTypeComboBox = QtWidgets.QComboBox(self.samplingGroupBox)
        self.samplingTypeComboBox.setObjectName("samplingTypeComboBox")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingHLayout.addWidget(self.samplingTypeComboBox)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.samplingHLayout.addItem(spacerItem3)
        self.compressLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.compressLabel.setObjectName("compressLabel")
        self.samplingHLayout.addWidget(self.compressLabel)
        self.compressSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.compressSpinBox.setPrefix("")
        self.compressSpinBox.setMinimum(1)
        self.compressSpinBox.setMaximum(99)
        self.compressSpinBox.setProperty("value", 50)
        self.compressSpinBox.setObjectName("compressSpinBox")
        self.samplingHLayout.addWidget(self.compressSpinBox)
        self.verticalLayout_3.addLayout(self.samplingHLayout)
        self.samplingHLine = QtWidgets.QFrame(self.samplingGroupBox)
        self.samplingHLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.samplingHLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.samplingHLine.setObjectName("samplingHLine")
        self.verticalLayout_3.addWidget(self.samplingHLine)
        self.elementHLayout = QtWidgets.QHBoxLayout()
        self.elementHLayout.setObjectName("elementHLayout")
        self.elementLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.elementLabel.setObjectName("elementLabel")
        self.elementHLayout.addWidget(self.elementLabel)
        self.elementLineEdit = QtWidgets.QLineEdit(self.samplingGroupBox)
        self.elementLineEdit.setObjectName("elementLineEdit")
        self.elementHLayout.addWidget(self.elementLineEdit)
        self.verticalLayout_3.addLayout(self.elementHLayout)
        self.jitterHLayout = QtWidgets.QHBoxLayout()
        self.jitterHLayout.setObjectName("jitterHLayout")
        self.jitterBlockLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.jitterBlockLabel.setObjectName("jitterBlockLabel")
        self.jitterHLayout.addWidget(self.jitterBlockLabel)
        self.jitterBlockSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.jitterBlockSpinBox.setSuffix("")
        self.jitterBlockSpinBox.setPrefix("")
        self.jitterBlockSpinBox.setMinimum(1)
        self.jitterBlockSpinBox.setMaximum(999)
        self.jitterBlockSpinBox.setObjectName("jitterBlockSpinBox")
        self.jitterHLayout.addWidget(self.jitterBlockSpinBox)
        self.jitterTypeLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.jitterTypeLabel.setObjectName("jitterTypeLabel")
        self.jitterHLayout.addWidget(self.jitterTypeLabel)
        self.jitterComboBox = QtWidgets.QComboBox(self.samplingGroupBox)
        self.jitterComboBox.setObjectName("jitterComboBox")
        self.jitterComboBox.addItem("")
        self.jitterComboBox.addItem("")
        self.jitterHLayout.addWidget(self.jitterComboBox)
        self.verticalLayout_3.addLayout(self.jitterHLayout)
        self.sdHLayout = QtWidgets.QHBoxLayout()
        self.sdHLayout.setObjectName("sdHLayout")
        self.spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.sdHLayout.addItem(self.spacerItem4)
        self.seedHLayout = QtWidgets.QHBoxLayout()
        self.seedHLayout.setObjectName("seedHLayout")
        self.seedCheckBox = QtWidgets.QCheckBox(self.samplingGroupBox)
        self.seedCheckBox.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.seedCheckBox.setObjectName("seedCheckBox")
        self.seedHLayout.addWidget(self.seedCheckBox)
        self.seedLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.seedLabel.setObjectName("seedLabel")
        self.seedHLayout.addWidget(self.seedLabel)
        self.seedSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.seedSpinBox.setEnabled(False)
        self.seedSpinBox.setSuffix("")
        self.seedSpinBox.setPrefix("")
        self.seedSpinBox.setMinimum(-999)
        self.seedSpinBox.setMaximum(999)
        self.seedSpinBox.setObjectName("seedSpinBox")
        self.seedHLayout.addWidget(self.seedSpinBox)
        self.sdHLayout.addLayout(self.seedHLayout)
        self.spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.sdHLayout.addItem(self.spacerItem5)
        self.verticalLayout_3.addLayout(self.sdHLayout)
        self.samExpVLayout.addWidget(self.samplingGroupBox)
        self.runGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.runGroupBox.setObjectName("runGroupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.runGroupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.saveAsHLayout = QtWidgets.QHBoxLayout()
        self.saveAsHLayout.setObjectName("saveAsHLayout")
        self.saveAsLabel = QtWidgets.QLabel(self.runGroupBox)
        self.saveAsLabel.setObjectName("saveAsLabel")
        self.saveAsHLayout.addWidget(self.saveAsLabel)
        self.saveAsLineEdit = QtWidgets.QLineEdit(self.runGroupBox)
        self.saveAsLineEdit.setObjectName("saveAsLineEdit")
        self.saveAsHLayout.addWidget(self.saveAsLineEdit)
        self.saveAsPushButton = QtWidgets.QPushButton(self.runGroupBox)
        self.saveAsPushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("assets/icons/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveAsPushButton.setIcon(icon1)
        self.saveAsPushButton.setObjectName("saveAsPushButton")
        self.saveAsHLayout.addWidget(self.saveAsPushButton)
        self.verticalLayout.addLayout(self.saveAsHLayout)
        self.experimentProgressBar = QtWidgets.QProgressBar(self.runGroupBox)
        self.experimentProgressBar.setProperty("value", 0)
        self.experimentProgressBar.setObjectName("experimentProgressBar")
        self.verticalLayout.addWidget(self.experimentProgressBar)
        self.startHLayout = QtWidgets.QHBoxLayout()
        self.startHLayout.setObjectName("startHLayout")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.startHLayout.addItem(spacerItem6)
        self.startPushButton = QtWidgets.QPushButton(self.runGroupBox)
        self.startPushButton.setObjectName("startPushButton")
        self.startHLayout.addWidget(self.startPushButton)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.startHLayout.addItem(spacerItem7)
        self.verticalLayout.addLayout(self.startHLayout)
        self.samExpVLayout.addWidget(self.runGroupBox)
        self.viewHLine = QtWidgets.QFrame(self.centralwidget)
        self.viewHLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.viewHLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.viewHLine.setObjectName("viewHLine")
        self.samExpVLayout.addWidget(self.viewHLine)
        self.viewHLayout = QtWidgets.QHBoxLayout()
        self.viewHLayout.setObjectName("viewHLayout")
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.viewHLayout.addItem(spacerItem8)
        self.viewLabel = QtWidgets.QLabel(self.centralwidget)
        self.viewLabel.setObjectName("viewLabel")
        self.viewHLayout.addWidget(self.viewLabel)
        self.viewPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.viewPushButton.setAutoFillBackground(False)
        self.viewPushButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("assets/icons/report.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.viewPushButton.setIcon(icon2)
        self.viewPushButton.setAutoDefault(False)
        self.viewPushButton.setDefault(False)
        self.viewPushButton.setFlat(False)
        self.viewPushButton.setObjectName("viewPushButton")
        self.viewHLayout.addWidget(self.viewPushButton)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.viewHLayout.addItem(spacerItem9)
        self.samExpVLayout.addLayout(self.viewHLayout)
        self.leftVLayout.addLayout(self.samExpVLayout)
        self.horizontalLayout_4.addLayout(self.leftVLayout)
        self.performanceTabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.performanceTabWidget.setObjectName("performanceTabWidget")
        self.expPerformanceTab1 = QtWidgets.QWidget()
        self.expPerformanceTab1.setObjectName("expPerformanceTab1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.expPerformanceTab1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.graphicPerformanceWidget = QtWidgets.QWidget(self.expPerformanceTab1)
        self.graphicPerformanceWidget.setObjectName("graphicPerformanceWidget")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.graphicPerformanceWidget)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.tuningPerformanceVLayout = QtWidgets.QVBoxLayout()
        self.tuningPerformanceVLayout.setSpacing(0)
        self.tuningPerformanceVLayout.setObjectName("tuningPerformanceVLayout")
        self.verticalLayout_11.addLayout(self.tuningPerformanceVLayout)
        self.verticalLayout_2.addWidget(self.graphicPerformanceWidget)
        self.performanceTabWidget.addTab(self.expPerformanceTab1, "")
        self.horizontalLayout_4.addWidget(self.performanceTabWidget)
        self.horizontalLayout_4.setStretch(1, 15)
        self.setCentralWidget(self.centralwidget)

        self.retranslateUi()
        self.performanceTabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

        # others
        self.init_actions()
        self.init_graphics()
        self.init_visible_widgets()

    def init_actions(self):
        self.tab_mode = 'tuning'
        self.tuning_directory = ''
        self.report_directory = ''

        self.onlydouble = QtGui.QDoubleValidator(decimals=10)
        self.onlyInt = QtGui.QIntValidator()
        self.experimentProgressBar.setValue(0)

        # algorithms

        self.algorithmComboBox.currentTextChanged.connect(self.on_algorithm_changed)
        self.algorithmPushButton.clicked.connect(self.show_equation_window)
        self.paramTuningComboBox.currentTextChanged.connect(self.on_param_tuning_changed)
        self.paramComboBox.currentIndexChanged.connect(self.on_fixed_param_changed)
        self.samplingTypeComboBox.currentTextChanged.connect(self.on_sampling_changed)

        # buttons

        self.loadPushButton.clicked.connect(self.load_files)
        self.saveAsPushButton.clicked.connect(self.save_files)
        self.saveAsLineEdit.editingFinished.connect(self.save_as_text_changed)
        self.startPushButton.clicked.connect(self.start_experiment)
        self.viewPushButton.clicked.connect(self.set_view)

        self.seedCheckBox.stateChanged.connect(self.activate_seed)

    def init_graphics(self):

        # tuning graphics

        self.tuningGraphic = TuningGraphic()
        self.tuningToolbar = NavigationToolbar(self.tuningGraphic, self)
        self.tuningPerformanceVLayout.addWidget(self.tuningToolbar)
        self.tuningPerformanceVLayout.addWidget(self.tuningGraphic)

    def init_visible_widgets(self):
        self.inputGroupBox.setMaximumWidth(300)
        self.algorithmGroupBox.setMaximumWidth(300)
        self.samplingGroupBox.setMaximumWidth(300)
        self.runGroupBox.setMaximumWidth(300)

        self.set_visible_algorithm(self.algorithmComboBox.currentText().lower(),
                                   self.paramTuningComboBox.currentText().lower(), self.paramComboBox.currentIndex())

        self.elementLabel.setVisible(False)
        self.elementLineEdit.setVisible(False)
        self.jitterTypeLabel.setVisible(False)
        self.jitterComboBox.setVisible(False)
        self.jitterBlockLabel.setVisible(False)
        self.jitterBlockSpinBox.setVisible(False)

    def load_files(self):
        kwargs = {}
        if 'SNAP' in os.environ:
            kwargs['options'] = QtWidgets.QFileDialog.DontUseNativeDialog

        if self.tab_mode == 'tuning':
            message = 'Abrir dato sísmico'
            file_type = 'npy'
        else:  # 'report'
            message = 'Abrir ajuste de parámetros'
            file_type = 'npz'

        self.data_fname = QtWidgets.QFileDialog.getOpenFileName(self, message, self.tuning_directory,
                                                                filter=f'numpy file (*.{file_type})', **kwargs)

        if self.data_fname[0] == '':
            return

        if self.tab_mode == 'tuning':
            self.tuning_directory = self.data_fname[0]
            self.update_data_tree(self.tuning_directory)
        else:
            self.report_directory = self.data_fname[0]

            try:
                data = np.load(self.report_directory, allow_pickle=True)
                self.algorithm_name = str(data['algorithm']).lower()
                self.tuning_data = pd.DataFrame({item[0]: item[1] for item in data['tuning_data']})
                self.fixed_params = {item[0]: item[1] for item in data['fixed_params']}

                self.tuningGraphic.update_tuning(self.algorithm_name, self.tuning_data, self.fixed_params)
                self.tuningGraphic.update_figure()

                self.update_data_tree(self.report_directory)

            except:
                showWarning('Este archivo no contiene información del ajuste de parámetros, cargue un archivo valido.')

    def save_files(self):
        kwargs = {}
        if 'SNAP' in os.environ:
            kwargs['options'] = QFileDialog.DontUseNativeDialog

        save_name = QFileDialog.getSaveFileName(self, 'Guardar ajuste de parámetros', self.tuning_directory,
                                                filter=f'numpy file (*.npz)', **kwargs)
        if save_name[0] == '':
            self.saveAsLineEdit.setText('')
            return

        save_name = f'{save_name[0]}.npz' if not 'npz' in save_name[0] else save_name[0]

        self.saveAsLineEdit.setText(save_name)
        self.experiment_directory = save_name

    def update_data_tree(self, directory):
        if directory == '':
            self.dataTreeWidget.clear()
            return

        filename = directory.split('/')
        parent_name = filename[-2]
        child_name = filename[-1]

        parent = self.dataTreeWidget.findItems('', Qt.MatchContains | Qt.MatchRecursive)

        if parent:
            parent[0].setText(0, parent_name)
            parent[0].child(0).setText(0, child_name)
            parent[0].setExpanded(True)

        else:
            parent = QtWidgets.QTreeWidgetItem(self.dataTreeWidget)
            parent.setText(0, parent_name)
            child = QtWidgets.QTreeWidgetItem(parent)
            child.setText(0, filename[-1])

            parent.setExpanded(True)

    def save_as_text_changed(self):
        save_name = self.saveAsLineEdit.text()
        if not 'npz' in save_name:
            save_name = f'{save_name}.npz'

        self.saveAsLineEdit.setText(save_name)
        self.experiment_directory = save_name

    def set_tuning_view(self):
        self.set_visible_algorithm(self.algorithmComboBox.currentText().lower(),
                                   self.paramTuningComboBox.currentText().lower(),
                                   self.paramComboBox.currentIndex())

        self.algorithmGroupBox.setVisible(True)
        self.samplingGroupBox.setVisible(True)
        self.runGroupBox.setVisible(True)

        _translate = QtCore.QCoreApplication.translate
        self.inputGroupBox.setTitle(_translate("mainWindow", "Datos sísmicos"))

        if self.report_directory != '':
            self.tuningGraphic.update_figure()

        self.saveAsLineEdit.setText(self.report_directory)
        self.update_data_tree(self.tuning_directory)

    def set_report_view(self):
        self.algorithmGroupBox.setVisible(False)
        self.samplingGroupBox.setVisible(False)
        self.runGroupBox.setVisible(False)

        _translate = QtCore.QCoreApplication.translate
        self.inputGroupBox.setTitle(_translate("mainWindow", "Datos sísmicos reconstruidos"))

        if self.report_directory != '':
            self.tuningGraphic.update_figure()

        self.update_data_tree(self.report_directory)

    def set_view(self):
        icon = QtGui.QIcon()
        if self.tab_mode == 'tuning':
            self.set_report_view()
            self.tab_mode = 'report'
            icon.addPixmap(QtGui.QPixmap("assets/icons/seismic.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.viewLabel.setText('Realizar experimentos')

        else:
            self.set_tuning_view()
            self.tab_mode = 'tuning'
            icon.addPixmap(QtGui.QPixmap("assets/icons/report.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.viewLabel.setText('Ver resultados')

        self.viewPushButton.setIcon(icon)

    def show_equation_window(self):
        self.ui_equation_window = UIEquationWindow()
        self.ui_equation_window.setupUi(self.algorithmComboBox.currentText())
        self.ui_equation_window.show()

    def on_algorithm_changed(self, value):
        self.set_visible_algorithm(value.lower(), self.paramTuningComboBox.currentText().lower(),
                                   self.paramComboBox.currentIndex())

    def activate_seed(self, activate):
        self.seedSpinBox.setEnabled(activate)

    def verify_list(self, param, lista):
        try:
            lista = [float(number) for number in lista.replace(' ', '').split(',')]
            lista.sort()

            if any(number < 0 for number in lista):
                return 'error_lista_0'

        except:
            return 'error_lista_1'

    def verify_params(self):
        algorithm = self.algorithmComboBox.currentText().lower()
        fixed_param = self.paramComboBox.currentIndex()

        # verify parametrization
        if self.paramTuningComboBox.currentText().lower() == 'intervalo':
            if algorithm == 'fista':
                if fixed_param == 0:
                    comparison = float(self.param2InitLineEdit.text()) >= float(self.param2EndLineEdit.text())
                else:
                    comparison = float(self.param1InitLineEdit.text()) >= float(self.param1EndLineEdit.text())

                if comparison:
                    return 'error_intervalo'

            elif algorithm == 'gap':

                if float(self.param1InitLineEdit.text()) >= float(self.param1EndLineEdit.text()):
                    return 'error_intervalo'

            else:  # twist, admm
                if fixed_param == 0:
                    comparison = float(self.param2InitLineEdit.text()) >= float(self.param2EndLineEdit.text()) or float(
                        self.param3InitLineEdit.text()) >= float(self.param3EndLineEdit.text())
                elif fixed_param == 1:
                    comparison = float(self.param1InitLineEdit.text()) >= float(self.param1EndLineEdit.text()) or float(
                        self.param3InitLineEdit.text()) >= float(self.param3EndLineEdit.text())
                else:
                    comparison = float(self.param2InitLineEdit.text()) >= float(self.param2EndLineEdit.text()) or float(
                        self.param3InitLineEdit.text()) >= float(self.param3EndLineEdit.text())

                if comparison:
                    return 'error_intervalo'

        if self.paramTuningComboBox.currentText().lower() == 'lista':
            if algorithm == 'fista':
                if fixed_param == 0:
                    verify_list = self.verify_list('mu', self.param2InitLineEdit.text())
                else:
                    verify_list = self.verify_list('lambda', self.param1InitLineEdit.text())

            elif algorithm == 'gap':
                verify_list = self.verify_list('lambda', self.param1InitLineEdit.text())

            elif algorithm == 'twist':
                if fixed_param == 0:
                    verify_list = self.verify_list('beta', self.param3InitLineEdit.text())
                elif fixed_param == 1:
                    verify_list = self.verify_list('alpha', self.param2InitLineEdit.text())
                else:
                    self.verify_list('lambda', self.param1InitLineEdit.text())

            else:  # admm
                if fixed_param == 0:
                    verify_list = self.verify_list('lambda', self.param3InitLineEdit.text())
                elif fixed_param == 1:
                    verify_list = self.verify_list('gamma', self.param2InitLineEdit.text())
                else:
                    verify_list = self.verify_list('rho', self.param1InitLineEdit.text())

            return verify_list

    def start_experiment(self):

        if self.tuning_directory == '':
            showWarning("Para iniciar, debe cargar el dato sísmico dando click al boton 'Cargar'")
            return

        if self.experiment_directory == '':
            showWarning("Por favor seleccione un nombre de archivo para guardar los resultados del algoritmo.")
            return

        verify_params = self.verify_params()  # verify tuning parameters
        if verify_params == 'error intervalo':
            showWarning("Uno de los parámetros iniciales es mayor o igual que su parámetro final "
                        "(param_init >= param_end).")
            return

        elif verify_params == 'error_lista_0':
            showWarning(f"No ingrese elementos menores que cero a la lista de elementos.")
            return

        elif verify_params == 'error_lista_1':
            showWarning(f"Expresión invalida en los elementos de la lista.\n"
                        "Verifique que ingreso correctamente los datos (ingrese más de un valor).")
            return

        try:
            # I took this values from ipynb notebook
            self.experimentProgressBar.setValue(0)
            self.fixed_params = None

            algorithm = self.algorithmComboBox.currentText().lower()
            fixed_param = self.paramComboBox.currentIndex()

            if self.paramTuningComboBox.currentText().lower() == 'intervalo':

                if algorithm == 'gap':
                    params1 = list(np.linspace(float(self.param1InitLineEdit.text()),
                                               float(self.param1EndLineEdit.text()),
                                               int(self.paramValuesSpinBox.text())))

                elif fixed_param == 0:
                    params1 = [float(self.param1InitLineEdit.text())]
                    if algorithm in ['twist', 'admm']:
                        params2 = [float(self.param2InitLineEdit.text())]
                    else:
                        params2 = list(np.linspace(float(self.param2InitLineEdit.text()),
                                                   float(self.param2EndLineEdit.text()),
                                                   int(self.paramValuesSpinBox.text())))
                    params3 = list(np.linspace(float(self.param3InitLineEdit.text()),
                                               float(self.param3EndLineEdit.text()),
                                               int(self.paramValuesSpinBox.text())))
                elif fixed_param == 1:
                    if algorithm in ['twist', 'admm']:
                        params1 = [float(self.param1InitLineEdit.text())]
                        params2 = list(np.linspace(float(self.param2InitLineEdit.text()),
                                                   float(self.param2EndLineEdit.text()),
                                                   int(self.paramValuesSpinBox.text())))
                        params3 = [float(self.param3InitLineEdit.text())]
                    else:
                        params1 = list(np.linspace(float(self.param1InitLineEdit.text()),
                                                   float(self.param1EndLineEdit.text()),
                                                   int(self.paramValuesSpinBox.text())))
                        params2 = [float(self.param2InitLineEdit.text())]
                        params3 = list(np.linspace(float(self.param3InitLineEdit.text()),
                                                   float(self.param3EndLineEdit.text()),
                                                   int(self.paramValuesSpinBox.text())))
                else:

                    params1 = list(np.linspace(float(self.param1InitLineEdit.text()),
                                               float(self.param1EndLineEdit.text()),
                                               int(self.paramValuesSpinBox.text())))
                    params2 = [float(self.param2InitLineEdit.text())]
                    params3 = [float(self.param3InitLineEdit.text())]

            else:  # lista
                lista1 = self.param1InitLineEdit.text().replace(' ', '').split(',')
                lista2 = self.param2InitLineEdit.text().replace(' ', '').split(',')
                lista3 = self.param3InitLineEdit.text().replace(' ', '').split(',')
                lista1.sort()
                lista2.sort()
                lista3.sort()

                params1 = [float(number) for number in lista1]
                params2 = [float(number) for number in lista2]
                params3 = [float(number) for number in lista3]

            # seismic data

            self.maxiter = int(self.maxiterSpinBox.text())
            seismic_data = np.load(self.tuning_directory)
            seismic_data = seismic_data.T / np.max(np.abs(seismic_data))

            # sampling

            mode = self.samplingTypeComboBox.currentText().lower()
            n_bloque = int(self.jitterBlockSpinBox.text())
            lista = self.elementLineEdit

            seed = None
            if self.seedCheckBox.checkState():
                seed = int(self.seedSpinBox.text())

            compresson_ratio = float(self.compressSpinBox.text().split('%')[0]) / 100
            self.sampling_dict, H = self.sampling.apply_sampling(seismic_data, mode, n_bloque, lista, seed,
                                                                 compresson_ratio)

            # Algorithm

            self.algorithm_name = self.algorithmComboBox.currentText().lower()

            if self.algorithm_name == 'fista':
                params_list = [params1, params2]
            elif self.algorithm_name == 'gap':
                params_list = [params1]
            else:
                params_list = [params1, params2, params3]

            func = None
            parameters = []
            for params in product(*params_list):
                if len(params) == 1:
                    params = dict(param1=params[0])
                elif len(params) == 2:
                    params = dict(param1=params[0], param2=params[1])
                else:
                    params = dict(param1=params[0], param2=params[1], param3=params[2])

                Alg = Algorithms(seismic_data, H, 'DCT2D',
                                 'IDCT2D')  # Assuming using DCT2D ad IDCT2D for all algorithms
                func, params = Alg.get_algorithm(self.algorithm_name, self.maxiter, **params)

                parameters.append(params)

            self.total_num_run = len(parameters)

            if algorithm == 'fista':
                if fixed_param == 0:
                    self.fixed_params = {'lmb': params1[0]}
                else:
                    self.fixed_params = {'mu': params2[0]}

            elif algorithm == 'gap':
                self.fixed_params = dict()

            elif algorithm == 'twist':
                if fixed_param == 0:
                    self.fixed_params = {'lmb': params1[0], 'alpha': params2[0]}
                elif fixed_param == 1:
                    self.fixed_params = {'lmb': params1[0], 'beta': params3[0]}
                else:
                    self.fixed_params = {'alpha': params2[0], 'beta': params3[0]}

            else:
                if fixed_param == 0:
                    self.fixed_params = {'rho': params1[0], 'gamma': params2[0]}
                elif fixed_param == 1:
                    self.fixed_params = {'rho': params1[0], 'lmb': params3[0]}
                else:
                    self.fixed_params = {'gamma': params2[0], 'lmb': params3[0]}

            # run experiments in a thread

            self.thread = QtCore.QThread()
            self.worker = TuningWorker(func, parameters, self.maxiter)
            self.worker.moveToThread(self.thread)

            self.thread.started.connect(self.worker.run)
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.worker.deleteLater)
            self.thread.finished.connect(self.thread.deleteLater)
            self.worker.progress.connect(self.report_progress)

            self.thread.start()

            self.worker.finished.connect(self.save_experiment)  # save results

            # Final resets
            self.startPushButton.setEnabled(False)
            self.thread.finished.connect(self.reset_values)

        except BaseException as err:
            msg = f"Unexpected {err=}, {type(err)=}"
            showCritical("Ocurrió un error inesperado al procesar el dato sísmico. Por favor, intente nuevamente o "
                         "utilice un dato diferente.", details=msg)
            self.experimentProgressBar.setValue(0)
            return

    def report_progress(self, num_run, err, psnr, params):
        self.experimentProgressBar.setValue(int((num_run / self.total_num_run) * 100))

        # update figure
        data = {key: [float(value)] for key, value in params.items()}
        data['error'] = [float(err)]
        data['psnr'] = [float(psnr)]

        if num_run == 1:
            self.tuning_data = pd.DataFrame(data)
        else:
            self.tuning_data = pd.concat([self.tuning_data, pd.DataFrame(data)])

        self.tuningGraphic.update_tuning(self.algorithm_name.lower(), self.tuning_data, self.fixed_params)
        self.tuningGraphic.update_figure()

    def save_experiment(self):
        tuning_data = np.array(list(self.tuningGraphic.tuning_data.items()), dtype=object)
        fixed_params = np.array(list(self.fixed_params.items()), dtype=object)

        self.report_directory = self.experiment_directory
        np.savez(self.report_directory, algorithm=self.algorithm_name, tuning_data=tuning_data,
                 fixed_params=fixed_params)
        print("Results saved [Ok]")

    def reset_values(self):
        self.startPushButton.setEnabled(True)
        self.experimentProgressBar.setValue(0)
        self.maxiter = 1
        self.worker = None
        self.thread = None
        self.sampling_dict = None

    def on_param_tuning_changed(self, value):
        self.set_visible_algorithm(self.algorithmComboBox.currentText().lower(), value.lower(),
                                   self.paramComboBox.currentIndex())

    def on_fixed_param_changed(self, value):
        self.set_visible_algorithm(self.algorithmComboBox.currentText().lower(),
                                   self.paramTuningComboBox.currentText().lower(), value)

    def on_sampling_changed(self, value):
        sampling = value.lower()

        self.spacerItem4.changeSize(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.spacerItem5.changeSize(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.samplingHLine.setVisible(False if sampling in 'uniforme' else True)

        visible = True if sampling not in 'lista' else False
        self.compressLabel.setVisible(visible)
        self.compressSpinBox.setVisible(visible)
        self.compressSpinBox.setMaximum(99 if sampling in ['aleatorio', 'jitter'] else 50)

        visible = True if sampling in 'aleatorio' else False
        self.seedCheckBox.setVisible(visible)
        self.seedLabel.setVisible(visible)
        self.seedSpinBox.setVisible(visible)

        visible = True if sampling in 'jitter' else False
        self.jitterBlockLabel.setVisible(visible)
        self.jitterBlockSpinBox.setVisible(visible)
        self.jitterTypeLabel.setVisible(visible)
        self.jitterComboBox.setVisible(visible)

        visible = True if sampling in 'lista' else False
        self.elementLabel.setVisible(visible)
        self.elementLineEdit.setVisible(visible)

        if sampling in ['aleatorio']:
            self.spacerItem4.changeSize(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.spacerItem5.changeSize(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)

    def set_visible_algorithm(self, algorithm, tuning, fixed_param):

        lambda_icon = 'assets/equations/lambda.png'
        lambda_init_icon = 'assets/parameters/lambda_init.png'
        lambda_list_icon = 'assets/parameters/lambda_list.png'
        lambda_end_icon = 'assets/parameters/lambda_end.png'
        mu_icon = 'assets/equations/mu.png'
        mu_init_icon = 'assets/parameters/mu_init.png'
        mu_list_icon = 'assets/parameters/mu_list.png'
        mu_end_icon = 'assets/parameters/mu_end.png'
        rho_icon = 'assets/equations/rho.png'
        rho_init_icon = 'assets/parameters/rho_init.png'
        rho_list_icon = 'assets/parameters/rho_list.png'
        rho_end_icon = 'assets/parameters/rho_end.png'
        alpha_icon = 'assets/equations/alpha.png'
        alpha_init_icon = 'assets/parameters/alpha_init.png'
        alpha_list_icon = 'assets/parameters/alpha_list.png'
        alpha_end_icon = 'assets/parameters/alpha_end.png'
        beta_icon = 'assets/equations/beta.png'
        beta_init_icon = 'assets/parameters/beta_init.png'
        beta_list_icon = 'assets/parameters/beta_list.png'
        beta_end_icon = 'assets/parameters/beta_end.png'
        gamma_icon = 'assets/equations/gamma.png'
        gamma_init_icon = 'assets/parameters/gamma_init.png'
        gamma_list_icon = 'assets/parameters/gamma_list.png'
        gamma_end_icon = 'assets/parameters/gamma_end.png'

        tuning_range_visible = True if tuning in 'intervalo' else False

        self.paramTuningLabel.setVisible(True)
        self.paramTuningComboBox.setVisible(True)
        self.paramValuesLabel.setVisible(tuning_range_visible)
        self.paramValuesSpinBox.setVisible(tuning_range_visible)
        self.algorithmHLine.setVisible(True)
        self.param1InitLabel.setVisible(True)
        self.param1InitLineEdit.setVisible(True)
        self.param1EndLabel.setVisible(True)
        self.param1EndLineEdit.setVisible(True)
        self.param2InitLabel.setVisible(True)
        self.param2InitLineEdit.setVisible(True)
        self.param2EndLabel.setVisible(True)
        self.param2EndLineEdit.setVisible(True)
        self.param3InitLabel.setVisible(True)
        self.param3InitLineEdit.setVisible(True)
        self.param3EndLabel.setVisible(True)
        self.param3EndLineEdit.setVisible(True)
        self.paramLabel.setVisible(True)
        self.paramComboBox.setVisible(True)

        # self.paramComboBox.clear()

        if algorithm == "fista":
            self.param1InitLabel.setPixmap(
                QtGui.QPixmap(lambda_init_icon if tuning in 'intervalo' else lambda_list_icon))
            self.param1EndLabel.setPixmap(QtGui.QPixmap(lambda_end_icon))
            self.param2InitLabel.setPixmap(QtGui.QPixmap(mu_init_icon if tuning in 'intervalo' else mu_list_icon))
            self.param2EndLabel.setPixmap(QtGui.QPixmap(mu_end_icon))
            self.param1InitLineEdit.setText(str(0.1))
            self.param1EndLineEdit.setText(str(0.5))
            self.param2InitLineEdit.setText(str(0.3))
            self.param2EndLineEdit.setText(str(0.7))
            self.param3InitLabel.setVisible(False)
            self.param3InitLineEdit.setVisible(False)
            self.param3EndLabel.setVisible(False)
            self.param3EndLineEdit.setVisible(False)
            self.param1EndLabel.setVisible(tuning_range_visible)
            self.param1EndLineEdit.setVisible(tuning_range_visible)
            self.param2EndLabel.setVisible(tuning_range_visible)
            self.param2EndLineEdit.setVisible(tuning_range_visible)

            self.paramComboBox.setItemIcon(0, QtGui.QIcon('assets/equations/lambda.png'))
            self.paramComboBox.setItemIcon(1, QtGui.QIcon('assets/equations/mu.png'))
            self.paramComboBox.setItemIcon(2, QtGui.QIcon(''))

            if fixed_param == 2: self.paramComboBox.setCurrentIndex(1)

            if fixed_param == 0:
                self.param1InitLabel.setPixmap(QtGui.QPixmap(lambda_icon))
                self.param1EndLabel.setVisible(False)
                self.param1EndLineEdit.setVisible(False)
            else:
                self.param2InitLabel.setPixmap(QtGui.QPixmap(mu_icon))
                self.param2EndLabel.setVisible(False)
                self.param2EndLineEdit.setVisible(False)


        elif algorithm == "gap":
            self.param1InitLabel.setPixmap(
                QtGui.QPixmap(lambda_init_icon if tuning in 'intervalo' else lambda_list_icon))
            self.param1EndLabel.setPixmap(QtGui.QPixmap(lambda_end_icon))
            self.param1InitLineEdit.setText(str(1.0))
            self.param1EndLineEdit.setText(str(1.5))
            self.param2InitLabel.setVisible(False)
            self.param2InitLineEdit.setVisible(False)
            self.param2EndLabel.setVisible(False)
            self.param2EndLineEdit.setVisible(False)
            self.param3InitLabel.setVisible(False)
            self.param3InitLineEdit.setVisible(False)
            self.param3EndLabel.setVisible(False)
            self.param3EndLineEdit.setVisible(False)
            self.param1EndLabel.setVisible(tuning_range_visible)
            self.param1EndLineEdit.setVisible(tuning_range_visible)
            self.paramLabel.setVisible(False)
            self.paramComboBox.setVisible(False)

        elif algorithm == "twist":
            self.param1InitLabel.setPixmap(
                QtGui.QPixmap(lambda_init_icon if tuning in 'intervalo' else lambda_list_icon))
            self.param1EndLabel.setPixmap(QtGui.QPixmap(lambda_end_icon))
            self.param2InitLabel.setPixmap(QtGui.QPixmap(alpha_init_icon if tuning in 'intervalo' else alpha_list_icon))
            self.param2EndLabel.setPixmap(QtGui.QPixmap(alpha_end_icon))
            self.param3InitLabel.setPixmap(QtGui.QPixmap(beta_init_icon if tuning in 'intervalo' else beta_list_icon))
            self.param3EndLabel.setPixmap(QtGui.QPixmap(beta_end_icon))
            self.param1InitLineEdit.setText(str(0.9))
            self.param1EndLineEdit.setText(str(1.5))
            self.param2InitLineEdit.setText(str(1.2))
            self.param2EndLineEdit.setText(str(1.7))
            self.param3InitLineEdit.setText(str(1.998))
            self.param3EndLineEdit.setText(str(2.3))
            self.param1EndLabel.setVisible(tuning_range_visible)
            self.param1EndLineEdit.setVisible(tuning_range_visible)
            self.param2EndLabel.setVisible(tuning_range_visible)
            self.param2EndLineEdit.setVisible(tuning_range_visible)
            self.param3EndLabel.setVisible(tuning_range_visible)
            self.param3EndLineEdit.setVisible(tuning_range_visible)

            self.paramComboBox.setItemIcon(0, QtGui.QIcon('assets/parameters/lambda_alpha.png'))
            self.paramComboBox.setItemIcon(1, QtGui.QIcon('assets/parameters/lambda_beta.png'))
            self.paramComboBox.setItemIcon(2, QtGui.QIcon('assets/parameters/alpha_beta.png'))

            if fixed_param == 0:
                self.param1InitLabel.setPixmap(QtGui.QPixmap(lambda_icon))
                self.param1EndLabel.setVisible(False)
                self.param1EndLineEdit.setVisible(False)
                self.param2InitLabel.setPixmap(QtGui.QPixmap(alpha_icon))
                self.param2EndLabel.setVisible(False)
                self.param2EndLineEdit.setVisible(False)
            elif fixed_param == 1:
                self.param1InitLabel.setPixmap(QtGui.QPixmap(lambda_icon))
                self.param1EndLabel.setVisible(False)
                self.param1EndLineEdit.setVisible(False)
                self.param3InitLabel.setPixmap(QtGui.QPixmap(beta_icon))
                self.param3EndLabel.setVisible(False)
                self.param3EndLineEdit.setVisible(False)
            else:
                self.param2InitLabel.setPixmap(QtGui.QPixmap(alpha_icon))
                self.param2EndLabel.setVisible(False)
                self.param2EndLineEdit.setVisible(False)
                self.param3InitLabel.setPixmap(QtGui.QPixmap(beta_icon))
                self.param3EndLabel.setVisible(False)
                self.param3EndLineEdit.setVisible(False)

        elif algorithm == "admm":
            self.param1InitLabel.setPixmap(
                QtGui.QPixmap(rho_init_icon if tuning in 'intervalo' else rho_list_icon))
            self.param1EndLabel.setPixmap(QtGui.QPixmap(rho_end_icon))
            self.param2InitLabel.setPixmap(QtGui.QPixmap(gamma_init_icon if tuning in 'intervalo' else gamma_list_icon))
            self.param2EndLabel.setPixmap(QtGui.QPixmap(gamma_end_icon))
            self.param3InitLabel.setPixmap(
                QtGui.QPixmap(lambda_init_icon if tuning in 'intervalo' else lambda_list_icon))
            self.param3EndLabel.setPixmap(QtGui.QPixmap(lambda_end_icon))
            self.param1InitLineEdit.setText(str(0.5))
            self.param1EndLineEdit.setText(str(1.5))
            self.param2InitLineEdit.setText(str(1.0))
            self.param2EndLineEdit.setText(str(1.7))
            self.param3InitLineEdit.setText(str(0.0078))
            self.param3EndLineEdit.setText(str(0.009))
            self.param1EndLabel.setVisible(tuning_range_visible)
            self.param1EndLineEdit.setVisible(tuning_range_visible)
            self.param2EndLabel.setVisible(tuning_range_visible)
            self.param2EndLineEdit.setVisible(tuning_range_visible)
            self.param3EndLabel.setVisible(tuning_range_visible)
            self.param3EndLineEdit.setVisible(tuning_range_visible)

            self.paramComboBox.setItemIcon(0, QtGui.QIcon('assets/parameters/rho_gamma.png'))
            self.paramComboBox.setItemIcon(1, QtGui.QIcon('assets/parameters/rho_lambda.png'))
            self.paramComboBox.setItemIcon(2, QtGui.QIcon('assets/parameters/gamma_lambda.png'))

            if fixed_param == 0:
                self.param1InitLabel.setPixmap(QtGui.QPixmap(rho_icon))
                self.param1EndLabel.setVisible(False)
                self.param1EndLineEdit.setVisible(False)
                self.param2InitLabel.setPixmap(QtGui.QPixmap(gamma_icon))
                self.param2EndLabel.setVisible(False)
                self.param2EndLineEdit.setVisible(False)
            elif fixed_param == 1:
                self.param1InitLabel.setPixmap(QtGui.QPixmap(rho_icon))
                self.param1EndLabel.setVisible(False)
                self.param1EndLineEdit.setVisible(False)
                self.param3InitLabel.setPixmap(QtGui.QPixmap(lambda_icon))
                self.param3EndLabel.setVisible(False)
                self.param3EndLineEdit.setVisible(False)
            else:
                self.param2InitLabel.setPixmap(QtGui.QPixmap(gamma_icon))
                self.param2EndLabel.setVisible(False)
                self.param2EndLineEdit.setVisible(False)
                self.param3InitLabel.setPixmap(QtGui.QPixmap(lambda_icon))
                self.param3EndLabel.setVisible(False)
                self.param3EndLineEdit.setVisible(False)

        else:
            raise Exception("Invalid Algorithm Name")

        if tuning == 'intervalo':
            self.param1InitLineEdit.setValidator(self.onlydouble)
            self.param1EndLineEdit.setValidator(self.onlydouble)
            self.param2InitLineEdit.setValidator(self.onlydouble)
            self.param2EndLineEdit.setValidator(self.onlydouble)
            self.param3InitLineEdit.setValidator(self.onlydouble)
            self.param3EndLineEdit.setValidator(self.onlydouble)

        else:
            if algorithm == 'fista':
                if fixed_param == 0:
                    self.param1InitLineEdit.setValidator(self.onlydouble)
                    self.param2InitLineEdit.setValidator(None)
                else:
                    self.param1InitLineEdit.setValidator(None)
                    self.param2InitLineEdit.setValidator(self.onlydouble)

            elif algorithm == 'gap':
                self.param1InitLineEdit.setValidator(None)

            elif algorithm in ['twist', 'admm']:
                if fixed_param == 0:
                    self.param1InitLineEdit.setValidator(self.onlydouble)
                    self.param2InitLineEdit.setValidator(None)
                    self.param3InitLineEdit.setValidator(None)
                elif fixed_param == 1:
                    self.param1InitLineEdit.setValidator(None)
                    self.param2InitLineEdit.setValidator(self.onlydouble)
                    self.param3InitLineEdit.setValidator(None)
                else:
                    self.param1InitLineEdit.setValidator(None)
                    self.param2InitLineEdit.setValidator(None)
                    self.param3InitLineEdit.setValidator(self.onlydouble)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("tuningWindow", "Ajuste de parámetros"))
        self.inputGroupBox.setTitle(_translate("tuningWindow", "Datos sísmicos"))
        self.dataTreeWidget.headerItem().setText(0, _translate("tuningWindow", "Datos actuales"))
        self.loadPushButton.setText(_translate("tuningWindow", "Cargar"))
        self.algorithmGroupBox.setTitle(_translate("tuningWindow", "Algoritmos"))
        self.algorithmComboBox.setItemText(0, _translate("tuningWindow", "FISTA"))
        self.algorithmComboBox.setItemText(1, _translate("tuningWindow", "GAP"))
        self.algorithmComboBox.setItemText(2, _translate("tuningWindow", "TwIST"))
        self.algorithmComboBox.setItemText(3, _translate("tuningWindow", "ADMM"))
        self.algorithmPushButton.setToolTip(_translate("tuningWindow", "Ver ecuación"))
        self.maxiterLabel.setText(_translate("tuningWindow", "Max iter"))
        self.paramTuningLabel.setText(_translate("tuningWindow", "Parámetrización"))
        self.paramTuningComboBox.setItemText(0, _translate("tuningWindow", "Intervalo"))
        self.paramTuningComboBox.setItemText(1, _translate("tuningWindow", "Lista"))
        self.paramLabel.setText(_translate("tuningWindow", "Fijar: "))
        self.paramValuesLabel.setText(_translate("tuningWindow", "Valores"))
        self.param1InitLineEdit.setText(_translate("tuningWindow", "0.1"))
        self.param1EndLineEdit.setText(_translate("tuningWindow", "1.0"))
        self.param2InitLineEdit.setText(_translate("tuningWindow", "0.1"))
        self.param2EndLineEdit.setText(_translate("tuningWindow", "1.0"))
        self.param3InitLineEdit.setText(_translate("tuningWindow", "0.1"))
        self.param3EndLineEdit.setText(_translate("tuningWindow", "1.0"))
        self.samplingGroupBox.setTitle(_translate("tuningWindow", "Submuestreo"))
        self.samplingTypeLabel.setText(_translate("tuningWindow", "Tipo"))
        self.samplingTypeComboBox.setItemText(0, _translate("tuningWindow", "Aleatorio"))
        self.samplingTypeComboBox.setItemText(1, _translate("tuningWindow", "Uniforme"))
        self.samplingTypeComboBox.setItemText(2, _translate("tuningWindow", "Jitter"))
        self.samplingTypeComboBox.setItemText(3, _translate("tuningWindow", "Lista"))
        self.compressLabel.setText(_translate("tuningWindow", "Compresión"))
        self.compressSpinBox.setSuffix(_translate("tuningWindow", "%"))
        self.elementLabel.setText(_translate("tuningWindow", "Elementos"))
        self.jitterBlockLabel.setText(_translate("tuningWindow", "Bloques"))
        self.jitterTypeLabel.setText(_translate("tuningWindow", "Tipo"))
        self.jitterComboBox.setItemText(0, _translate("tuningWindow", "Aleatorio"))
        self.jitterComboBox.setItemText(1, _translate("tuningWindow", "Uniforme"))
        self.seedCheckBox.setText(_translate("tuningWindow", "Usar semilla"))
        self.seedLabel.setText(_translate("tuningWindow", "Valor"))
        self.runGroupBox.setTitle(_translate("tuningWindow", "Experimentos"))
        self.saveAsLabel.setText(_translate("tuningWindow", "Guardar como"))
        self.startPushButton.setText(_translate("tuningWindow", "Iniciar"))
        self.viewLabel.setText(_translate("tuningWindow", "Ver resultados"))
        self.performanceTabWidget.setTabText(self.performanceTabWidget.indexOf(self.expPerformanceTab1),
                                             _translate("tuningWindow", "Experimento"))
