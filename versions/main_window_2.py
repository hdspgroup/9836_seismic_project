# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ultimate_main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

import numpy as np
from PyQt5.Qt import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar

from Algorithms.Function import Sampling, Algorithms
from about_window import UIAboutWindow
from equation_window import UIEquationWindow
from graphics import PerformanceGraphic, ReportGraphic
from gui.alerts import showWarning, showCritical
from workers import Worker
from tuning_window import UITuningWindow


class UIMainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(UIMainWindow, self).__init__()
        self.setupUi()

        self.sampling = Sampling()

    def closeEvent(self, event):
        message_box = QtWidgets.QMessageBox(self)
        message_box.pos()
        message_box.setIcon(QtWidgets.QMessageBox.Question)
        message_box.setWindowTitle('Cerrar aplicación')
        message_box.setText('¿Estás segur@ que quieres cerrar la aplicación?')
        message_box.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        yesButton = message_box.button(QtWidgets.QMessageBox.Yes)
        yesButton.setText('Si')
        buttonN = message_box.button(QtWidgets.QMessageBox.No)
        buttonN.setText('No')
        message_box.exec_()

        if message_box.clickedButton() == yesButton:
            event.accept()
            print('Window closed')
            sys.exit(0)
        else:
            event.ignore()

    def setupUi(self):
        self.setObjectName("mainWindow")
        self.resize(1412, 870)
        self.setMinimumSize(1100, 870)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.mainLayout = QtWidgets.QVBoxLayout()
        self.mainLayout.setObjectName("mainLayout")
        self.inputGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.inputGroupBox.setObjectName("inputGroupBox")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.inputGroupBox)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.dataTreeWidget = QtWidgets.QTreeWidget(self.inputGroupBox)
        self.dataTreeWidget.setObjectName("dataTreeWidget")
        self.verticalLayout_7.addWidget(self.dataTreeWidget)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.loadPushButton = QtWidgets.QPushButton(self.inputGroupBox)
        self.loadPushButton.setObjectName("loadPushButton")
        self.horizontalLayout.addWidget(self.loadPushButton)
        spacerItem1 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_7.addLayout(self.horizontalLayout)
        self.mainLayout.addWidget(self.inputGroupBox)
        self.algorithmGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.algorithmGroupBox.setObjectName("algorithmGroupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.algorithmGroupBox)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.algorithmHLayout = QtWidgets.QHBoxLayout()
        self.algorithmHLayout.setObjectName("algorithmHLayout")
        self.algorithmComboBox = QtWidgets.QComboBox(self.algorithmGroupBox)
        self.algorithmComboBox.setObjectName("algorithmComboBox")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmHLayout.addWidget(self.algorithmComboBox)
        self.algorithmPushButton = QtWidgets.QPushButton(self.algorithmGroupBox)
        self.algorithmPushButton.setEnabled(True)
        self.algorithmPushButton.setAutoFillBackground(False)
        self.algorithmPushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("assets/icons/view.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.algorithmPushButton.setIcon(icon)
        self.algorithmPushButton.setObjectName("algorithmPushButton")
        self.algorithmHLayout.addWidget(self.algorithmPushButton)
        spacerItem2 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.algorithmHLayout.addItem(spacerItem2)
        self.maxiterLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.maxiterLabel.setObjectName("maxiterLabel")
        self.algorithmHLayout.addWidget(self.maxiterLabel)
        self.maxiterSpinBox = QtWidgets.QSpinBox(self.algorithmGroupBox)
        self.maxiterSpinBox.setMinimum(1)
        self.maxiterSpinBox.setMaximum(9999)
        self.maxiterSpinBox.setProperty("value", 100)
        self.maxiterSpinBox.setObjectName("maxiterSpinBox")
        self.algorithmHLayout.addWidget(self.maxiterSpinBox)
        self.verticalLayout_2.addLayout(self.algorithmHLayout)
        self.paramsHLayout = QtWidgets.QHBoxLayout()
        self.paramsHLayout.setObjectName("paramsHLayout")
        self.param1Label = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param1Label.setText("")
        self.param1Label.setTextFormat(QtCore.Qt.AutoText)
        self.param1Label.setPixmap(QtGui.QPixmap("assets/equations/lambda.png"))
        self.param1Label.setScaledContents(True)
        self.param1Label.setWordWrap(False)
        self.param1Label.setIndent(-1)
        self.param1Label.setObjectName("param1Label")
        self.paramsHLayout.addWidget(self.param1Label)
        self.param1LineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param1LineEdit.setObjectName("param1LineEdit")
        self.paramsHLayout.addWidget(self.param1LineEdit)
        self.param2Label = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param2Label.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.param2Label.sizePolicy().hasHeightForWidth())
        self.param2Label.setSizePolicy(sizePolicy)
        self.param2Label.setText("")
        self.param2Label.setPixmap(QtGui.QPixmap("assets/equations/mu.png"))
        self.param2Label.setScaledContents(True)
        self.param2Label.setObjectName("param2Label")
        self.paramsHLayout.addWidget(self.param2Label)
        self.param2LineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param2LineEdit.setObjectName("param2LineEdit")
        self.paramsHLayout.addWidget(self.param2LineEdit)
        self.param3Label = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param3Label.setText("")
        self.param3Label.setPixmap(QtGui.QPixmap("assets/equations/rho.png"))
        self.param3Label.setObjectName("param3Label")
        self.paramsHLayout.addWidget(self.param3Label)
        self.param3LineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param3LineEdit.setObjectName("param3LineEdit")
        self.paramsHLayout.addWidget(self.param3LineEdit)
        self.verticalLayout_2.addLayout(self.paramsHLayout)
        self.mainLayout.addWidget(self.algorithmGroupBox)
        self.samplingGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.samplingGroupBox.setObjectName("samplingGroupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.samplingGroupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.samplingHLayout = QtWidgets.QHBoxLayout()
        self.samplingHLayout.setObjectName("samplingHLayout")
        self.samplingTypeLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.samplingTypeLabel.setObjectName("samplingTypeLabel")
        self.samplingHLayout.addWidget(self.samplingTypeLabel)
        self.samplingTypeComboBox = QtWidgets.QComboBox(self.samplingGroupBox)
        self.samplingTypeComboBox.setObjectName("samplingTypeComboBox")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingHLayout.addWidget(self.samplingTypeComboBox)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.samplingHLayout.addItem(spacerItem3)
        self.compressLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.compressLabel.setObjectName("compressLabel")
        self.samplingHLayout.addWidget(self.compressLabel)
        self.compressSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.compressSpinBox.setPrefix("")
        self.compressSpinBox.setMinimum(1)
        self.compressSpinBox.setMaximum(99)
        self.compressSpinBox.setProperty("value", 50)
        self.compressSpinBox.setObjectName("compressSpinBox")
        self.samplingHLayout.addWidget(self.compressSpinBox)
        self.verticalLayout_3.addLayout(self.samplingHLayout)
        self.samplingHLine = QtWidgets.QFrame(self.samplingGroupBox)
        self.samplingHLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.samplingHLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.samplingHLine.setObjectName("samplingHLine")
        self.verticalLayout_3.addWidget(self.samplingHLine)
        self.elementHLayout = QtWidgets.QHBoxLayout()
        self.elementHLayout.setObjectName("elementHLayout")
        self.elementLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.elementLabel.setObjectName("elementLabel")
        self.elementHLayout.addWidget(self.elementLabel)
        self.elementLineEdit = QtWidgets.QLineEdit(self.samplingGroupBox)
        self.elementLineEdit.setObjectName("elementLineEdit")
        self.elementHLayout.addWidget(self.elementLineEdit)
        self.verticalLayout_3.addLayout(self.elementHLayout)
        self.jitterHLayout = QtWidgets.QHBoxLayout()
        self.jitterHLayout.setObjectName("jitterHLayout")
        self.jitterBlockLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.jitterBlockLabel.setObjectName("jitterBlockLabel")
        self.jitterHLayout.addWidget(self.jitterBlockLabel)
        self.jitterBlockSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.jitterBlockSpinBox.setSuffix("")
        self.jitterBlockSpinBox.setPrefix("")
        self.jitterBlockSpinBox.setMinimum(1)
        self.jitterBlockSpinBox.setMaximum(999)
        self.jitterBlockSpinBox.setObjectName("jitterBlockSpinBox")
        self.jitterHLayout.addWidget(self.jitterBlockSpinBox)
        self.jitterTypeLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.jitterTypeLabel.setObjectName("jitterTypeLabel")
        self.jitterHLayout.addWidget(self.jitterTypeLabel)
        self.jitterComboBox = QtWidgets.QComboBox(self.samplingGroupBox)
        self.jitterComboBox.setObjectName("jitterComboBox")
        self.jitterComboBox.addItem("")
        self.jitterComboBox.addItem("")
        self.jitterHLayout.addWidget(self.jitterComboBox)
        self.verticalLayout_3.addLayout(self.jitterHLayout)
        self.sdHLayout = QtWidgets.QHBoxLayout()
        self.sdHLayout.setObjectName("sdHLayout")
        self.spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.sdHLayout.addItem(self.spacerItem4)
        self.seedHLayout = QtWidgets.QHBoxLayout()
        self.seedHLayout.setObjectName("seedHLayout")
        self.seedCheckBox = QtWidgets.QCheckBox(self.samplingGroupBox)
        self.seedCheckBox.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.seedCheckBox.setObjectName("seedCheckBox")
        self.seedHLayout.addWidget(self.seedCheckBox)
        self.seedLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.seedLabel.setObjectName("seedLabel")
        self.seedHLayout.addWidget(self.seedLabel)
        self.seedSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.seedSpinBox.setEnabled(False)
        self.seedSpinBox.setSuffix("")
        self.seedSpinBox.setPrefix("")
        self.seedSpinBox.setMinimum(-999)
        self.seedSpinBox.setMaximum(999)
        self.seedSpinBox.setObjectName("seedSpinBox")
        self.seedHLayout.addWidget(self.seedSpinBox)
        self.sdHLayout.addLayout(self.seedHLayout)
        self.spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.sdHLayout.addItem(self.spacerItem5)
        self.verticalLayout_3.addLayout(self.sdHLayout)
        self.mainLayout.addWidget(self.samplingGroupBox)
        self.runGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.runGroupBox.setObjectName("runGroupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.runGroupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.saveAsHLayout = QtWidgets.QHBoxLayout()
        self.saveAsHLayout.setObjectName("saveAsHLayout")
        self.saveAsLabel = QtWidgets.QLabel(self.runGroupBox)
        self.saveAsLabel.setObjectName("saveAsLabel")
        self.saveAsHLayout.addWidget(self.saveAsLabel)
        self.saveAsLineEdit = QtWidgets.QLineEdit(self.runGroupBox)
        self.saveAsLineEdit.setObjectName("saveAsLineEdit")
        self.saveAsHLayout.addWidget(self.saveAsLineEdit)
        self.saveAsPushButton = QtWidgets.QPushButton(self.runGroupBox)
        self.saveAsPushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("assets/icons/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveAsPushButton.setIcon(icon1)
        self.saveAsPushButton.setObjectName("saveAsPushButton")
        self.saveAsHLayout.addWidget(self.saveAsPushButton)
        self.verticalLayout.addLayout(self.saveAsHLayout)
        self.experimentProgressBar = QtWidgets.QProgressBar(self.runGroupBox)
        self.experimentProgressBar.setProperty("value", 0)
        self.experimentProgressBar.setObjectName("experimentProgressBar")
        self.verticalLayout.addWidget(self.experimentProgressBar)
        self.startHLayout = QtWidgets.QHBoxLayout()
        self.startHLayout.setObjectName("startHLayout")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.startHLayout.addItem(spacerItem6)
        self.startPushButton = QtWidgets.QPushButton(self.runGroupBox)
        self.startPushButton.setObjectName("startPushButton")
        self.startHLayout.addWidget(self.startPushButton)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.startHLayout.addItem(spacerItem7)
        self.verticalLayout.addLayout(self.startHLayout)
        self.mainLayout.addWidget(self.runGroupBox)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.mainLayout.addWidget(self.line)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem8)
        self.viewLabel = QtWidgets.QLabel(self.centralwidget)
        self.viewLabel.setObjectName("viewLabel")
        self.horizontalLayout_4.addWidget(self.viewLabel)
        self.viewPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.viewPushButton.setAutoFillBackground(False)
        self.viewPushButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("assets/icons/report.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.viewPushButton.setIcon(icon2)
        self.viewPushButton.setAutoDefault(False)
        self.viewPushButton.setDefault(False)
        self.viewPushButton.setFlat(False)
        self.viewPushButton.setObjectName("viewPushButton")
        self.horizontalLayout_4.addWidget(self.viewPushButton)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem9)
        self.mainLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_2.addLayout(self.mainLayout)
        self.resultsToolBox = QtWidgets.QToolBox(self.centralwidget)
        self.resultsToolBox.setObjectName("resultsToolBox")
        self.performancePage = QtWidgets.QWidget()
        self.performancePage.setGeometry(QtCore.QRect(0, 0, 1027, 804))
        self.performancePage.setObjectName("performancePage")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.performancePage)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.performanceTabWidget = QtWidgets.QTabWidget(self.performancePage)
        self.performanceTabWidget.setObjectName("performanceTabWidget")
        self.expPerformanceTab1 = QtWidgets.QWidget()
        self.expPerformanceTab1.setObjectName("expPerformanceTab1")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.expPerformanceTab1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.graphicPerformanceWidget = QtWidgets.QWidget(self.expPerformanceTab1)
        self.graphicPerformanceWidget.setObjectName("graphicPerformanceWidget")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.graphicPerformanceWidget)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.graphicPerformanceVLayout = QtWidgets.QVBoxLayout()
        self.graphicPerformanceVLayout.setSpacing(0)
        self.graphicPerformanceVLayout.setObjectName("graphicPerformanceVLayout")
        self.verticalLayout_11.addLayout(self.graphicPerformanceVLayout)
        self.horizontalLayout_3.addWidget(self.graphicPerformanceWidget)
        self.horizontalLayout_3.setStretch(0, 9)
        self.performanceTabWidget.addTab(self.expPerformanceTab1, "")
        self.verticalLayout_5.addWidget(self.performanceTabWidget)
        self.resultsToolBox.addItem(self.performancePage, "")
        self.reportPage = QtWidgets.QWidget()
        self.reportPage.setGeometry(QtCore.QRect(0, 0, 1027, 804))
        self.reportPage.setObjectName("reportPage")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.reportPage)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.reportTabWidget = QtWidgets.QTabWidget(self.reportPage)
        self.reportTabWidget.setObjectName("reportTabWidget")
        self.expReportTab1 = QtWidgets.QWidget()
        self.expReportTab1.setObjectName("expReportTab1")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.expReportTab1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.graphicReportWidget = QtWidgets.QWidget(self.expReportTab1)
        self.graphicReportWidget.setObjectName("graphicReportWidget")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.graphicReportWidget)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setSpacing(0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.graphicReportVLayout = QtWidgets.QVBoxLayout()
        self.graphicReportVLayout.setObjectName("graphicReportVLayout")
        self.verticalLayout_12.addLayout(self.graphicReportVLayout)
        self.verticalLayout_6.addWidget(self.graphicReportWidget)
        self.reportTabWidget.addTab(self.expReportTab1, "")
        self.verticalLayout_9.addWidget(self.reportTabWidget)
        self.resultsToolBox.addItem(self.reportPage, "")
        self.horizontalLayout_2.addWidget(self.resultsToolBox)
        self.horizontalLayout_2.setStretch(0, 1)
        self.horizontalLayout_2.setStretch(1, 10)
        self.setCentralWidget(self.centralwidget)
        self.toolBar = QtWidgets.QToolBar(self)
        self.toolBar.setObjectName("toolBar")
        self.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.aboutOfAction = QtWidgets.QAction(self)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("assets/icons/info.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.aboutOfAction.setIcon(icon3)
        self.aboutOfAction.setObjectName("aboutOfAction")
        self.reportAction = QtWidgets.QAction(self)
        self.reportAction.setIcon(icon2)
        self.reportAction.setObjectName("reportAction")
        self.mainAction = QtWidgets.QAction(self)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("assets/icons/main.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.mainAction.setIcon(icon4)
        self.mainAction.setObjectName("mainAction")
        self.tuningAction = QtWidgets.QAction(self)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("assets/icons/tuning.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tuningAction.setIcon(icon5)
        self.tuningAction.setObjectName("tuningAction")
        self.toolBar.addAction(self.tuningAction)
        self.toolBar.addAction(self.aboutOfAction)

        self.retranslateUi()
        self.resultsToolBox.setCurrentIndex(0)
        self.performanceTabWidget.setCurrentIndex(0)
        self.reportTabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

        # others
        self.init_actions()
        self.init_graphics()
        self.init_visible_widgets()

    def init_visible_widgets(self):
        self.inputGroupBox.setMinimumWidth(305)
        self.inputGroupBox.setMaximumWidth(300)
        self.algorithmGroupBox.setMaximumWidth(300)
        self.samplingGroupBox.setMaximumWidth(300)
        self.runGroupBox.setMaximumWidth(300)

        self.set_visible_algorithm(self.algorithmComboBox.currentText())

        self.elementLabel.setVisible(False)
        self.elementLineEdit.setVisible(False)
        self.jitterTypeLabel.setVisible(False)
        self.jitterComboBox.setVisible(False)
        self.jitterBlockLabel.setVisible(False)
        self.jitterBlockSpinBox.setVisible(False)

    def init_actions(self):
        self.tab_mode = 'main'  # main, report
        self.algorithm_name = ''
        self.main_directory = ''
        self.experiment_directory = ''
        self.report_directory = ''
        self.tuning_directory = ''

        self.iteracion = []
        self.error = []
        self.psnr = []

        self.onlydouble = QtGui.QDoubleValidator(decimals=10)
        self.onlyInt = QtGui.QIntValidator()
        self.experimentProgressBar.setValue(0)

        # tab
        self.tuningAction.triggered.connect(self.show_tuning_window)
        self.aboutOfAction.triggered.connect(self.show_about_window)

        # algorithms

        self.algorithmComboBox.currentTextChanged.connect(self.on_algorithm_changed)
        self.algorithmPushButton.clicked.connect(self.show_equation_window)
        self.samplingTypeComboBox.currentTextChanged.connect(self.on_sampling_changed)

        # buttons

        self.loadPushButton.clicked.connect(self.load_files)
        self.saveAsPushButton.clicked.connect(self.save_files)
        self.saveAsLineEdit.editingFinished.connect(self.save_as_text_changed)
        self.startPushButton.clicked.connect(self.start_experiment)
        self.viewPushButton.clicked.connect(self.set_view)

        self.seedCheckBox.stateChanged.connect(self.activate_seed)

    def init_graphics(self):

        # performance graphics

        self.performanceGraphic = PerformanceGraphic()
        self.performanceToolbar = NavigationToolbar(self.performanceGraphic, self)
        self.graphicPerformanceVLayout.addWidget(self.performanceToolbar)
        self.graphicPerformanceVLayout.addWidget(self.performanceGraphic)

        # report graphics

        self.reportGraphic = ReportGraphic()
        self.graphicToolbar = NavigationToolbar(self.reportGraphic, self)
        self.graphicReportVLayout.addWidget(self.graphicToolbar)
        self.graphicReportVLayout.addWidget(self.reportGraphic)

    def set_visible_algorithm(self, algorithm):
        algorithm = algorithm.lower()

        lambda_icon = f'assets/equations/lambda.png'
        mu_icon = f'assets/equations/mu.png'
        rho_icon = f'assets/equations/rho.png'
        alpha_icon = f'assets/equations/alpha.png'
        beta_icon = f'assets/equations/beta.png'
        gamma_icon = f'assets/equations/gamma.png'

        main_visible = True if self.tab_mode == 'main' else False

        self.param1Label.setVisible(main_visible)
        self.param1LineEdit.setVisible(main_visible)
        self.param2Label.setVisible(main_visible)
        self.param2LineEdit.setVisible(main_visible)
        self.param3Label.setVisible(main_visible)
        self.param3LineEdit.setVisible(main_visible)

        if algorithm == "fista":
            self.param1Label.setPixmap(QtGui.QPixmap(lambda_icon))
            self.param2Label.setPixmap(QtGui.QPixmap(mu_icon))
            self.param1LineEdit.setText(str(0.1))
            self.param2LineEdit.setText(str(0.3))
            self.param3Label.setVisible(False)
            self.param3LineEdit.setVisible(False)

        elif algorithm == "gap":
            self.param1Label.setPixmap(QtGui.QPixmap(lambda_icon))
            self.param1LineEdit.setText(str(1.0))
            self.param2Label.setVisible(False)
            self.param2LineEdit.setVisible(False)
            self.param3Label.setVisible(False)
            self.param3LineEdit.setVisible(False)

        elif algorithm == "twist":
            self.param1Label.setPixmap(QtGui.QPixmap(lambda_icon))
            self.param2Label.setPixmap(QtGui.QPixmap(alpha_icon))
            self.param3Label.setPixmap(QtGui.QPixmap(beta_icon))
            self.param1LineEdit.setText(str(0.9))
            self.param2LineEdit.setText(str(1.2))
            self.param3LineEdit.setText(str(1.998))

        elif algorithm == "admm":
            self.param1Label.setPixmap(QtGui.QPixmap(rho_icon))
            self.param2Label.setPixmap(QtGui.QPixmap(gamma_icon))
            self.param3Label.setPixmap(QtGui.QPixmap(lambda_icon))
            self.param1LineEdit.setText(str(0.5))
            self.param2LineEdit.setText(str(1.0))
            self.param3LineEdit.setText(str(0.0078))

        else:
            raise Exception("Invalid Algorithm Name")

        self.param1LineEdit.setValidator(self.onlydouble)
        self.param2LineEdit.setValidator(self.onlydouble)
        self.param3LineEdit.setValidator(self.onlydouble)

    def load_files(self):
        kwargs = {}
        if 'SNAP' in os.environ:
            kwargs['options'] = QtWidgets.QFileDialog.DontUseNativeDialog

        if self.tab_mode == 'main':
            message = 'Abrir dato sísmico'
            file_type = 'npy'
        else:  # 'report'
            message = 'Abrir datos sísmicos reconstruidos'
            file_type = 'npz'

        self.data_fname = QtWidgets.QFileDialog.getOpenFileName(self, message, self.main_directory,
                                                                filter=f'numpy file (*.{file_type})', **kwargs)

        if self.data_fname[0] == '':
            return

        if self.tab_mode == 'main':
            self.main_directory = self.data_fname[0]
            self.update_data_tree(self.main_directory)
        else:
            self.report_directory = self.data_fname[0]

            data = np.load(self.report_directory, allow_pickle=True)
            performance_data = {item[0]: item[1] for item in data['performance_data']}

            self.performanceGraphic.update_values(**performance_data)
            self.performanceGraphic.update_figure()

            self.reportGraphic.update_report(data)
            self.reportGraphic.update_figure()

            self.update_data_tree(self.report_directory)

    def save_files(self):
        kwargs = {}
        if 'SNAP' in os.environ:
            kwargs['options'] = QFileDialog.DontUseNativeDialog

        save_name = QFileDialog.getSaveFileName(self, 'Guardar reconstrucciones', self.main_directory,
                                                filter=f'numpy file (*.npz)', **kwargs)
        if save_name[0] == '':
            self.saveAsLineEdit.setText('')
            return

        save_name = f'{save_name[0]}.npz' if not 'npz' in save_name[0] else save_name[0]

        self.saveAsLineEdit.setText(save_name)
        self.experiment_directory = save_name

    def update_data_tree(self, directory):
        if directory == '':
            self.dataTreeWidget.clear()
            return

        filename = directory.split('/')
        parent_name = filename[-2]
        child_name = filename[-1]

        parent = self.dataTreeWidget.findItems('', Qt.MatchContains | Qt.MatchRecursive)

        if parent:
            parent[0].setText(0, parent_name)
            parent[0].child(0).setText(0, child_name)
            parent[0].setExpanded(True)

        else:
            parent = QtWidgets.QTreeWidgetItem(self.dataTreeWidget)
            parent.setText(0, parent_name)
            child = QtWidgets.QTreeWidgetItem(parent)
            child.setText(0, filename[-1])

            parent.setExpanded(True)

    def save_as_text_changed(self):
        save_name = self.saveAsLineEdit.text()
        if not 'npz' in save_name:
            save_name = f'{save_name}.npz'

        self.saveAsLineEdit.setText(save_name)
        self.experiment_directory = save_name

    def show_about_window(self):
        self.about_window = QtWidgets.QWidget()
        self.ui_about_window = UIAboutWindow()
        self.ui_about_window.setupUi(self.about_window)
        self.about_window.show()

    def set_view(self):
        icon = QtGui.QIcon()
        if self.tab_mode == 'main':
            self.set_report_view()
            self.tab_mode = 'report'
            icon.addPixmap(QtGui.QPixmap("assets/icons/seismic.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.viewLabel.setText('Realizar experimentos')

        else:
            self.set_main_view()
            self.tab_mode = 'main'
            icon.addPixmap(QtGui.QPixmap("assets/icons/report.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.viewLabel.setText('Ver resultados')

        self.viewPushButton.setIcon(icon)

    def set_main_view(self):
        self.set_visible_algorithm(self.algorithmComboBox.currentText())

        self.algorithmGroupBox.setVisible(True)
        self.samplingGroupBox.setVisible(True)
        self.runGroupBox.setVisible(True)

        _translate = QtCore.QCoreApplication.translate
        self.inputGroupBox.setTitle(_translate("mainWindow", "Datos sísmicos"))

        if self.report_directory != '':
            self.performanceGraphic.update_figure()
            self.reportGraphic.update_figure()

        self.saveAsLineEdit.setText(self.experiment_directory)
        self.update_data_tree(self.main_directory)

    def set_report_view(self):
        self.algorithmGroupBox.setVisible(False)
        self.samplingGroupBox.setVisible(False)
        self.runGroupBox.setVisible(False)

        _translate = QtCore.QCoreApplication.translate
        self.inputGroupBox.setTitle(_translate("mainWindow", "Datos sísmicos reconstruidos"))

        if self.report_directory != '':
            self.performanceGraphic.update_figure()
            self.reportGraphic.update_figure()

        self.update_data_tree(self.report_directory)

    def show_tuning_window(self):
        self.ui_tuning_window = UITuningWindow()
        self.ui_tuning_window.setupUi()
        self.ui_tuning_window.show()

    def show_equation_window(self):
        self.ui_equation_window = UIEquationWindow()
        self.ui_equation_window.setupUi(self.algorithmComboBox.currentText())
        self.ui_equation_window.show()

    def on_algorithm_changed(self, value):
        self.set_visible_algorithm(value.lower())

    def on_param_tuning_changed(self, value):
        pass
        # self.set_visible_algorithm(self.algorithmComboBox.currentText(), value.lower())

    def activate_seed(self, activate):
        self.seedSpinBox.setEnabled(activate)

    def on_sampling_changed(self, value):
        sampling = value.lower()

        self.spacerItem4.changeSize(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.spacerItem5.changeSize(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.samplingHLine.setVisible(False if sampling in 'uniforme' else True)

        visible = True if sampling not in 'lista' else False
        self.compressLabel.setVisible(visible)
        self.compressSpinBox.setVisible(visible)
        self.compressSpinBox.setMaximum(99 if sampling in ['aleatorio', 'jitter'] else 50)

        visible = True if sampling in 'aleatorio' else False
        self.seedCheckBox.setVisible(visible)
        self.seedLabel.setVisible(visible)
        self.seedSpinBox.setVisible(visible)

        visible = True if sampling in 'jitter' else False
        self.jitterBlockLabel.setVisible(visible)
        self.jitterBlockSpinBox.setVisible(visible)
        self.jitterTypeLabel.setVisible(visible)
        self.jitterComboBox.setVisible(visible)

        visible = True if sampling in 'lista' else False
        self.elementLabel.setVisible(visible)
        self.elementLineEdit.setVisible(visible)

        if sampling in ['aleatorio']:
            self.spacerItem4.changeSize(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.spacerItem5.changeSize(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)

    def start_experiment(self):

        if self.main_directory == '':
            showWarning("Para iniciar, debe cargar el dato sísmico dando click al boton 'Cargar'")
            return

        if self.experiment_directory == '':
            showWarning("Por favor seleccione un nombre de archivo para guardar los resultados del algoritmo.")
            return

        try:
            # I took this values from ipynb notebook
            self.experimentProgressBar.setValue(0)

            self.iteracion = []
            self.error = []
            self.psnr = []

            # seismic data

            self.maxiter = int(self.maxiterSpinBox.text())
            seismic_data = np.load(self.main_directory)
            seismic_data = seismic_data.T / np.max(np.abs(seismic_data))

            # sampling

            mode = self.samplingTypeComboBox.currentText().lower()
            n_bloque = int(self.jitterBlockSpinBox.text())
            lista = self.elementLineEdit

            seed = None
            if self.seedCheckBox.checkState():
                seed = int(self.seedSpinBox.text())

            compresson_ratio = float(self.compressSpinBox.text().split('%')[0]) / 100
            self.sampling_dict, H = self.sampling.apply_sampling(seismic_data, mode, n_bloque, lista, seed,
                                                                 compresson_ratio)

            # Algorithm

            self.algorithm_name = self.algorithmComboBox.currentText().lower()
            params = dict(param1=self.param1LineEdit.text(),
                          param2=self.param2LineEdit.text(),
                          param3=self.param3LineEdit.text())

            Alg = Algorithms(seismic_data, H, 'DCT2D', 'IDCT2D')  # Assuming using DCT2D ad IDCT2D for all algorithms
            func, parameters = Alg.get_algorithm(self.algorithm_name, self.maxiter, **params)

            # run experiment in a thread

            self.thread = QtCore.QThread()
            self.worker = Worker(func, parameters, self.maxiter)
            self.worker.moveToThread(self.thread)

            self.thread.started.connect(self.worker.run)
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.worker.deleteLater)
            self.thread.finished.connect(self.thread.deleteLater)
            self.worker.progress.connect(self.report_progress)

            self.thread.start()

            self.worker.finished.connect(self.save_experiment)  # save results

            # Final resets
            self.startPushButton.setEnabled(False)
            self.thread.finished.connect(self.reset_values)

        except BaseException as err:
            msg = f"Unexpected {err=}, {type(err)=}"
            showCritical("Ocurrió un error inesperado al procesar el dato sísmico. Por favor, intente nuevamente o "
                         "utilice un dato diferente.", details=msg)
            self.experimentProgressBar.setValue(0)
            return

    def report_progress(self, iter_val, err, psnr, res_dict):
        self.experimentProgressBar.setValue(int((iter_val / self.maxiter) * 100))

        # update figure
        err = float(err)
        psnr = float(psnr)

        self.iteracion.append(iter_val)
        self.error.append(err)
        self.psnr.append(psnr)

        if iter_val % (self.maxiter // 10) == 0 or iter_val == self.maxiter:
            self.performanceGraphic.update_values(self.iteracion, self.error, self.psnr)
            self.performanceGraphic.update_figure()

            self.reportGraphic.update_report(
                dict(x_result=res_dict['result'], hist=res_dict['hist'], sampling=self.sampling_dict,
                     algorithm_name=self.algorithm_name))
            self.reportGraphic.update_figure()

    def save_experiment(self, res_dict):
        performance_data = np.array(list(self.performanceGraphic.performance_data.items()), dtype=object)

        self.report_directory = self.experiment_directory
        np.savez(self.report_directory, x_result=res_dict['result'], hist=res_dict['hist'], sampling=self.sampling_dict,
                 algorithm_name=self.algorithm_name, performance_data=performance_data)
        print("Results saved [Ok]")

    def reset_values(self):
        self.startPushButton.setEnabled(True)
        self.experimentProgressBar.setValue(0)
        self.maxiter = 1
        self.worker = None
        self.thread = None
        self.sampling_dict = None

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("mainWindow", "9836 Proyecto de Sísmica"))
        self.inputGroupBox.setTitle(_translate("mainWindow", "Datos sísmicos"))
        self.dataTreeWidget.headerItem().setText(0, _translate("mainWindow", "Datos actuales"))
        self.loadPushButton.setText(_translate("mainWindow", "Cargar"))
        self.algorithmGroupBox.setTitle(_translate("mainWindow", "Algoritmos"))
        self.algorithmComboBox.setItemText(0, _translate("mainWindow", "FISTA"))
        self.algorithmComboBox.setItemText(1, _translate("mainWindow", "GAP"))
        self.algorithmComboBox.setItemText(2, _translate("mainWindow", "TwIST"))
        self.algorithmComboBox.setItemText(3, _translate("mainWindow", "ADMM"))
        self.algorithmPushButton.setToolTip(_translate("mainWindow", "Ver ecuación"))
        self.maxiterLabel.setText(_translate("mainWindow", "Max iter"))
        self.param1LineEdit.setText(_translate("mainWindow", "0.1"))
        self.param2LineEdit.setText(_translate("mainWindow", "0.3"))
        self.param3LineEdit.setText(_translate("mainWindow", "1"))
        self.samplingGroupBox.setTitle(_translate("mainWindow", "Submuestreo"))
        self.samplingTypeLabel.setText(_translate("mainWindow", "Tipo"))
        self.samplingTypeComboBox.setItemText(0, _translate("mainWindow", "Aleatorio"))
        self.samplingTypeComboBox.setItemText(1, _translate("mainWindow", "Uniforme"))
        self.samplingTypeComboBox.setItemText(2, _translate("mainWindow", "Jitter"))
        self.samplingTypeComboBox.setItemText(3, _translate("mainWindow", "Lista"))
        self.compressLabel.setText(_translate("mainWindow", "Compresión"))
        self.compressSpinBox.setSuffix(_translate("mainWindow", "%"))
        self.elementLabel.setText(_translate("mainWindow", "Elementos"))
        self.jitterBlockLabel.setText(_translate("mainWindow", "Bloques"))
        self.jitterTypeLabel.setText(_translate("mainWindow", "Tipo"))
        self.jitterComboBox.setItemText(0, _translate("mainWindow", "Aleatorio"))
        self.jitterComboBox.setItemText(1, _translate("mainWindow", "Uniforme"))
        self.seedCheckBox.setText(_translate("mainWindow", "Usar semilla"))
        self.seedLabel.setText(_translate("mainWindow", "Valor"))
        self.runGroupBox.setTitle(_translate("mainWindow", "Experimentos"))
        self.saveAsLabel.setText(_translate("mainWindow", "Guardar como"))
        self.startPushButton.setText(_translate("mainWindow", "Iniciar"))
        self.viewLabel.setText(_translate("mainWindow", "Ver resultados"))
        self.performanceTabWidget.setTabText(self.performanceTabWidget.indexOf(self.expPerformanceTab1), _translate("mainWindow", "Experimento"))
        self.resultsToolBox.setItemText(self.resultsToolBox.indexOf(self.performancePage), _translate("mainWindow", "Rendimiento"))
        self.reportTabWidget.setTabText(self.reportTabWidget.indexOf(self.expReportTab1), _translate("mainWindow", "Experimento"))
        self.resultsToolBox.setItemText(self.resultsToolBox.indexOf(self.reportPage), _translate("mainWindow", "Reporte"))
        self.toolBar.setWindowTitle(_translate("mainWindow", "toolBar"))
        self.aboutOfAction.setText(_translate("mainWindow", "about"))
        self.aboutOfAction.setToolTip(_translate("mainWindow", "<html><head/><body><p>Acerca de este proyecto</p></body></html>"))
        self.reportAction.setText(_translate("mainWindow", "report"))
        self.reportAction.setToolTip(_translate("mainWindow", "Visualización de resultados"))
        self.mainAction.setText(_translate("mainWindow", "main"))
        self.mainAction.setToolTip(_translate("mainWindow", "Ir al menú principal"))
        self.tuningAction.setText(_translate("mainWindow", "tuning"))
        self.tuningAction.setToolTip(_translate("mainWindow", "Ajuste de parámetros"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = UIMainWindow()

    qtRectangle = MainWindow.frameGeometry()
    centerPoint = QtWidgets.QDesktopWidget().availableGeometry().center()
    qtRectangle.moveCenter(centerPoint)
    MainWindow.move(qtRectangle.topLeft())
    enterPoint = QtWidgets.QDesktopWidget().availableGeometry().center()
    qtRectangle.moveCenter(centerPoint)
    MainWindow.move(qtRectangle.topLeft())

    MainWindow.show()
    sys.exit(app.exec_())
