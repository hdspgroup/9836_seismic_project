# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ultimate_main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from itertools import product
from pathlib import Path

import numpy as np
import pandas as pd
from PyQt5.Qt import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from scipy.io import loadmat
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from scipy.io import loadmat
from PyQt5.QtGui import QIcon

from Algorithms.Function import Sampling, Algorithms
from about_window import UIAboutWindow
from equation_window import UIEquationWindow
from equation_comparison_window import UIComparisonEquationWindow
from graphics import PerformanceGraphic, ReconstructionGraphic, TuningGraphic, ComparisonPerformanceGraphic, \
    ComparisonReconstructionGraphic, CustomToolbar
from gui.scripts.alerts import showWarning, showCritical
from jitter_window import UIJitterWindow
from workers import Worker, TuningWorker, ComparisonWorker
from tuning_window import UITuningWindow


def solve_path(relative_path):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath('.'), relative_path)


class UIMainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(UIMainWindow, self).__init__()
        self.setupUi()

        self.sampling = Sampling()

    def closeEvent(self, event):
        message_box = QtWidgets.QMessageBox(self)
        message_box.pos()
        message_box.setIcon(QtWidgets.QMessageBox.Question)
        message_box.setWindowTitle('Cerrar aplicación')
        message_box.setText('¿Estás segur@ que quieres cerrar la aplicación?')
        message_box.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        yesButton = message_box.button(QtWidgets.QMessageBox.Yes)
        yesButton.setText('Si')
        buttonN = message_box.button(QtWidgets.QMessageBox.No)
        buttonN.setText('No')
        message_box.exec_()

        if message_box.clickedButton() == yesButton:
            event.accept()
            print('Window closed')
            sys.exit(0)
        else:
            event.ignore()

    def setupUi(self):
        self.setWindowTitle("ReDs")
        self.setWindowIcon(QIcon("assets/icons/g868.ico"))
        self.setObjectName("mainWindow")
        self.resize(1412, 870)
        self.setMinimumSize(1100, 870)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.centralWidgetHLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.centralWidgetHLayout.setObjectName("centralWidgetHLayout")
        self.mainLayout = QtWidgets.QVBoxLayout()
        self.mainLayout.setObjectName("mainLayout")
        self.inputGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.inputGroupBox.setObjectName("inputGroupBox")
        self.inputGroupBoxVLayout = QtWidgets.QVBoxLayout(self.inputGroupBox)
        self.inputGroupBoxVLayout.setObjectName("inputGroupBoxVLayout")
        self.dataTreeWidget = QtWidgets.QTreeWidget(self.inputGroupBox)
        self.dataTreeWidget.setObjectName("dataTreeWidget")
        self.inputGroupBoxVLayout.addWidget(self.dataTreeWidget)
        self.inputHLayout = QtWidgets.QHBoxLayout()
        self.inputHLayout.setObjectName("inputHLayout")
        spacerItem = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.inputHLayout.addItem(spacerItem)
        self.loadPushButton = QtWidgets.QPushButton(self.inputGroupBox)
        self.loadPushButton.setObjectName("loadPushButton")
        self.inputHLayout.addWidget(self.loadPushButton)
        spacerItem1 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.inputHLayout.addItem(spacerItem1)
        self.inputGroupBoxVLayout.addLayout(self.inputHLayout)
        self.mainLayout.addWidget(self.inputGroupBox)
        self.algorithmGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.algorithmGroupBox.setObjectName("algorithmGroupBox")
        self.algorithmGroupVLayout = QtWidgets.QVBoxLayout(self.algorithmGroupBox)
        self.algorithmGroupVLayout.setObjectName("algorithmGroupVLayout")
        self.algorithmHLayout = QtWidgets.QHBoxLayout()
        self.algorithmHLayout.setObjectName("algorithmHLayout")
        self.algorithmComboBox = QtWidgets.QComboBox(self.algorithmGroupBox)
        self.algorithmComboBox.setObjectName("algorithmComboBox")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmComboBox.addItem("")
        self.algorithmHLayout.addWidget(self.algorithmComboBox)
        self.algorithmPushButton = QtWidgets.QPushButton(self.algorithmGroupBox)
        self.algorithmPushButton.setEnabled(True)
        self.algorithmPushButton.setAutoFillBackground(False)
        self.algorithmPushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(solve_path("assets/icons/view.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.algorithmPushButton.setIcon(icon)
        self.algorithmPushButton.setObjectName("algorithmPushButton")
        self.algorithmHLayout.addWidget(self.algorithmPushButton)
        self.maxiterLabel = QtWidgets.QLabel(self.algorithmGroupBox)
        self.maxiterLabel.setObjectName("maxiterLabel")
        self.algorithmHLayout.addWidget(self.maxiterLabel)
        self.maxiterSpinBox = QtWidgets.QSpinBox(self.algorithmGroupBox)
        self.maxiterSpinBox.setMinimum(1)
        self.maxiterSpinBox.setMaximum(9999)
        self.maxiterSpinBox.setProperty("value", 100)
        self.maxiterSpinBox.setObjectName("maxiterSpinBox")
        self.algorithmHLayout.addWidget(self.maxiterSpinBox)
        self.algorithmHLayout.setStretch(0, 5)
        self.algorithmGroupVLayout.addLayout(self.algorithmHLayout)
        self.paramsHLayout = QtWidgets.QHBoxLayout()
        self.paramsHLayout.setObjectName("paramsHLayout")
        self.param1Label = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param1Label.setText("")
        self.param1Label.setTextFormat(QtCore.Qt.AutoText)
        self.param1Label.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/lambda.png")))
        self.param1Label.setScaledContents(True)
        self.param1Label.setWordWrap(False)
        self.param1Label.setIndent(-1)
        self.param1Label.setObjectName("param1Label")
        self.paramsHLayout.addWidget(self.param1Label)
        self.param1LineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param1LineEdit.setObjectName("param1LineEdit")
        self.paramsHLayout.addWidget(self.param1LineEdit)
        self.param2Label = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param2Label.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.param2Label.sizePolicy().hasHeightForWidth())
        self.param2Label.setSizePolicy(sizePolicy)
        self.param2Label.setText("")
        self.param2Label.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/mu.png")))
        self.param2Label.setScaledContents(True)
        self.param2Label.setObjectName("param2Label")
        self.paramsHLayout.addWidget(self.param2Label)
        self.param2LineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param2LineEdit.setObjectName("param2LineEdit")
        self.paramsHLayout.addWidget(self.param2LineEdit)
        self.param3Label = QtWidgets.QLabel(self.algorithmGroupBox)
        self.param3Label.setText("")
        self.param3Label.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/rho.png")))
        self.param3Label.setObjectName("param3Label")
        self.paramsHLayout.addWidget(self.param3Label)
        self.param3LineEdit = QtWidgets.QLineEdit(self.algorithmGroupBox)
        self.param3LineEdit.setObjectName("param3LineEdit")
        self.paramsHLayout.addWidget(self.param3LineEdit)
        self.algorithmGroupVLayout.addLayout(self.paramsHLayout)
        self.mainLayout.addWidget(self.algorithmGroupBox)

        self.tuningGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.tuningGroupBox.setObjectName("tuningGroupBox")
        self.tuningGroupBoxVLayout = QtWidgets.QVBoxLayout(self.tuningGroupBox)
        self.tuningGroupBoxVLayout.setObjectName("tuningGroupBoxVLayout")
        self.paramTypeHLayout = QtWidgets.QHBoxLayout()
        self.paramTypeHLayout.setObjectName("paramTypeHLayout")
        self.paramTuningLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.paramTuningLabel.setObjectName("paramTuningLabel")
        self.paramTypeHLayout.addWidget(self.paramTuningLabel)
        self.paramTuningComboBox = QtWidgets.QComboBox(self.tuningGroupBox)
        self.paramTuningComboBox.setObjectName("paramTuningComboBox")
        self.paramTuningComboBox.addItem("")
        self.paramTuningComboBox.addItem("")
        self.paramTypeHLayout.addWidget(self.paramTuningComboBox)
        self.paramLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.paramLabel.setObjectName("paramLabel")
        self.paramTypeHLayout.addWidget(self.paramLabel)
        self.paramComboBox = QtWidgets.QComboBox(self.tuningGroupBox)
        self.paramComboBox.setObjectName("paramComboBox")
        self.paramComboBox.addItem("")
        self.paramComboBox.addItem("")
        self.paramComboBox.addItem("")
        self.paramTypeHLayout.addWidget(self.paramComboBox)
        self.paramTypeHLayout.setStretch(1, 4)
        self.tuningGroupBoxVLayout.addLayout(self.paramTypeHLayout)
        self.paramValueHLayout = QtWidgets.QHBoxLayout()
        self.paramValueHLayout.setContentsMargins(-1, 0, -1, -1)
        self.paramValueHLayout.setSpacing(6)
        self.paramValueHLayout.setObjectName("paramValueHLayout")
        self.scaleLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.scaleLabel.setObjectName("scaleLabel")
        self.paramValueHLayout.addWidget(self.scaleLabel)
        self.scaleComboBox = QtWidgets.QComboBox(self.tuningGroupBox)
        self.scaleComboBox.setObjectName("scaleComboBox")
        self.scaleComboBox.addItem("")
        self.scaleComboBox.addItem("")
        self.paramValueHLayout.addWidget(self.scaleComboBox)
        self.paramValuesLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.paramValuesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.paramValuesLabel.setObjectName("paramValuesLabel")
        self.paramValueHLayout.addWidget(self.paramValuesLabel)
        self.paramValuesSpinBox = QtWidgets.QSpinBox(self.tuningGroupBox)
        self.paramValuesSpinBox.setSuffix("")
        self.paramValuesSpinBox.setPrefix("")
        self.paramValuesSpinBox.setMinimum(2)
        self.paramValuesSpinBox.setMaximum(999)
        self.paramValuesSpinBox.setObjectName("paramValuesSpinBox")
        self.paramValueHLayout.addWidget(self.paramValuesSpinBox)
        self.paramValueHLayout.setStretch(0, 1)
        self.paramValueHLayout.setStretch(1, 4)
        self.paramValueHLayout.setStretch(2, 2)
        self.paramValueHLayout.setStretch(3, 2)
        self.tuningGroupBoxVLayout.addLayout(self.paramValueHLayout)
        self.algorithmHLine = QtWidgets.QFrame(self.tuningGroupBox)
        self.algorithmHLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.algorithmHLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.algorithmHLine.setObjectName("algorithmHLine")
        self.tuningGroupBoxVLayout.addWidget(self.algorithmHLine)

        self.param1HLayout = QtWidgets.QHBoxLayout()
        self.param1HLayout.setObjectName("param1HLayout")
        self.param1InitLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.param1InitLabel.setText("")
        self.param1InitLabel.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/lambda_init.png")))
        self.param1InitLabel.setObjectName("param1InitLabel")
        self.param1HLayout.addWidget(self.param1InitLabel)
        self.param1InitLineEdit = QtWidgets.QLineEdit(self.tuningGroupBox)
        self.param1InitLineEdit.setObjectName("param1InitLineEdit")
        self.param1HLayout.addWidget(self.param1InitLineEdit)
        self.param1EndLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.param1EndLabel.setText("")
        self.param1EndLabel.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/lambda_end.png")))
        self.param1EndLabel.setObjectName("param1EndLabel")
        self.param1HLayout.addWidget(self.param1EndLabel)
        self.param1EndLineEdit = QtWidgets.QLineEdit(self.tuningGroupBox)
        self.param1EndLineEdit.setObjectName("param1EndLineEdit")
        self.param1HLayout.addWidget(self.param1EndLineEdit)
        self.tuningGroupBoxVLayout.addLayout(self.param1HLayout)
        self.param2HLayout = QtWidgets.QHBoxLayout()
        self.param2HLayout.setObjectName("param2HLayout")
        self.param2InitLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.param2InitLabel.setText("")
        self.param2InitLabel.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/mu_init.png")))
        self.param2InitLabel.setObjectName("param2InitLabel")
        self.param2HLayout.addWidget(self.param2InitLabel)
        self.param2InitLineEdit = QtWidgets.QLineEdit(self.tuningGroupBox)
        self.param2InitLineEdit.setObjectName("param2InitLineEdit")
        self.param2HLayout.addWidget(self.param2InitLineEdit)
        self.param2EndLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.param2EndLabel.setText("")
        self.param2EndLabel.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/mu_end.png")))
        self.param2EndLabel.setObjectName("param2EndLabel")
        self.param2HLayout.addWidget(self.param2EndLabel)
        self.param2EndLineEdit = QtWidgets.QLineEdit(self.tuningGroupBox)
        self.param2EndLineEdit.setObjectName("param2EndLineEdit")
        self.param2HLayout.addWidget(self.param2EndLineEdit)
        self.tuningGroupBoxVLayout.addLayout(self.param2HLayout)
        self.param3HLayout = QtWidgets.QHBoxLayout()
        self.param3HLayout.setObjectName("param3HLayout")
        self.param3InitLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.param3InitLabel.setText("")
        self.param3InitLabel.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/rho_init.png")))
        self.param3InitLabel.setObjectName("param3InitLabel")
        self.param3HLayout.addWidget(self.param3InitLabel)
        self.param3InitLineEdit = QtWidgets.QLineEdit(self.tuningGroupBox)
        self.param3InitLineEdit.setObjectName("param3InitLineEdit")
        self.param3HLayout.addWidget(self.param3InitLineEdit)
        self.param3EndLabel = QtWidgets.QLabel(self.tuningGroupBox)
        self.param3EndLabel.setText("")
        self.param3EndLabel.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/rho_end.png")))
        self.param3EndLabel.setObjectName("param3EndLabel")
        self.param3HLayout.addWidget(self.param3EndLabel)
        self.param3EndLineEdit = QtWidgets.QLineEdit(self.tuningGroupBox)
        self.param3EndLineEdit.setObjectName("param3EndLineEdit")
        self.param3HLayout.addWidget(self.param3EndLineEdit)
        self.tuningGroupBoxVLayout.addLayout(self.param3HLayout)
        self.mainLayout.addWidget(self.tuningGroupBox)

        self.comparisonGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.comparisonGroupBox.setObjectName("comparisonGroupBox")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.comparisonGroupBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.comparisonAlgorithmLabel = QtWidgets.QLabel(self.comparisonGroupBox)
        self.comparisonAlgorithmLabel.setObjectName("comparisonAlgorithmLabel")
        self.gridLayout_2.addWidget(self.comparisonAlgorithmLabel, 0, 0, 1, 1)
        self.comparisonAlgorithmHLayout = QtWidgets.QHBoxLayout()
        self.comparisonAlgorithmHLayout.setObjectName("comparisonAlgorithmHLayout")
        self.comparisonAlgorithmHLayout = QtWidgets.QHBoxLayout()
        self.comparisonAlgorithmHLayout.setObjectName("comparisonAlgorithmHLayout")
        self.comparisonAlgorithmPushButton = QtWidgets.QPushButton(self.comparisonGroupBox)
        self.comparisonAlgorithmPushButton.setEnabled(True)
        self.comparisonAlgorithmPushButton.setAutoFillBackground(False)
        self.comparisonAlgorithmPushButton.setText("")
        self.comparisonAlgorithmPushButton.setIcon(icon)
        self.comparisonAlgorithmPushButton.setObjectName("comparisonAlgorithmPushButton")
        self.comparisonAlgorithmHLayout.addWidget(self.comparisonAlgorithmPushButton)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.comparisonAlgorithmHLayout.addItem(spacerItem2)
        self.comparisonMaxiterLabel = QtWidgets.QLabel(self.comparisonGroupBox)
        self.comparisonMaxiterLabel.setObjectName("comparisonMaxiterLabel")
        self.comparisonAlgorithmHLayout.addWidget(self.comparisonMaxiterLabel)
        self.comparisonMaxiterSpinBox = QtWidgets.QSpinBox(self.comparisonGroupBox)
        self.comparisonMaxiterSpinBox.setMinimum(1)
        self.comparisonMaxiterSpinBox.setMaximum(9999)
        self.comparisonMaxiterSpinBox.setProperty("value", 100)
        self.comparisonMaxiterSpinBox.setObjectName("comparisonMaxiterSpinBox")
        self.comparisonAlgorithmHLayout.addWidget(self.comparisonMaxiterSpinBox)
        self.gridLayout_2.addLayout(self.comparisonAlgorithmHLayout, 0, 1, 1, 1)
        self.comparisonLine = QtWidgets.QFrame(self.comparisonGroupBox)
        self.comparisonLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.comparisonLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.comparisonLine.setObjectName("comparisonLine")
        self.gridLayout_2.addWidget(self.comparisonLine, 1, 1, 1, 1)
        self.fistaLabel = QtWidgets.QLabel(self.comparisonGroupBox)
        self.fistaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.fistaLabel.setObjectName("fistaLabel")
        self.gridLayout_2.addWidget(self.fistaLabel, 2, 0, 1, 1)
        self.compParamsHLayout1 = QtWidgets.QHBoxLayout()
        self.compParamsHLayout1.setObjectName("compParamsHLayout1")
        self.compParam1Label1 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam1Label1.setText("")
        self.compParam1Label1.setTextFormat(QtCore.Qt.AutoText)
        self.compParam1Label1.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/lambda.png")))
        self.compParam1Label1.setScaledContents(True)
        self.compParam1Label1.setWordWrap(False)
        self.compParam1Label1.setIndent(-1)
        self.compParam1Label1.setObjectName("compParam1Label1")
        self.compParamsHLayout1.addWidget(self.compParam1Label1)
        self.compParam1LineEdit1 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam1LineEdit1.setObjectName("compParam1LineEdit1")
        self.compParamsHLayout1.addWidget(self.compParam1LineEdit1)
        self.compParam2Label1 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam2Label1.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.compParam2Label1.sizePolicy().hasHeightForWidth())
        self.compParam2Label1.setSizePolicy(sizePolicy)
        self.compParam2Label1.setText("")
        self.compParam2Label1.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/mu.png")))
        self.compParam2Label1.setScaledContents(True)
        self.compParam2Label1.setObjectName("compParam2Label1")
        self.compParamsHLayout1.addWidget(self.compParam2Label1)
        self.compParam2LineEdit1 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam2LineEdit1.setObjectName("compParam2LineEdit1")
        self.compParamsHLayout1.addWidget(self.compParam2LineEdit1)
        self.gridLayout_2.addLayout(self.compParamsHLayout1, 2, 1, 1, 1)
        self.gapLabel = QtWidgets.QLabel(self.comparisonGroupBox)
        self.gapLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.gapLabel.setObjectName("gapLabel")
        self.gridLayout_2.addWidget(self.gapLabel, 3, 0, 1, 1)
        self.compParamsHLayout2 = QtWidgets.QHBoxLayout()
        self.compParamsHLayout2.setObjectName("compParamsHLayout2")
        self.compParam1Label2 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam1Label2.setText("")
        self.compParam1Label2.setTextFormat(QtCore.Qt.AutoText)
        self.compParam1Label2.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/lambda.png")))
        self.compParam1Label2.setScaledContents(True)
        self.compParam1Label2.setWordWrap(False)
        self.compParam1Label2.setIndent(-1)
        self.compParam1Label2.setObjectName("compParam1Label2")
        self.compParamsHLayout2.addWidget(self.compParam1Label2)
        self.compParam1LineEdit2 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam1LineEdit2.setObjectName("compParam1LineEdit2")
        self.compParamsHLayout2.addWidget(self.compParam1LineEdit2)
        self.gridLayout_2.addLayout(self.compParamsHLayout2, 3, 1, 1, 1)
        self.twistLabel = QtWidgets.QLabel(self.comparisonGroupBox)
        self.twistLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.twistLabel.setObjectName("twistLabel")
        self.gridLayout_2.addWidget(self.twistLabel, 4, 0, 1, 1)
        self.compParamsHLayout3 = QtWidgets.QHBoxLayout()
        self.compParamsHLayout3.setObjectName("compParamsHLayout3")
        self.compParam1Label3 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam1Label3.setText("")
        self.compParam1Label3.setTextFormat(QtCore.Qt.AutoText)
        self.compParam1Label3.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/lambda.png")))
        self.compParam1Label3.setScaledContents(True)
        self.compParam1Label3.setWordWrap(False)
        self.compParam1Label3.setIndent(-1)
        self.compParam1Label3.setObjectName("compParam1Label3")
        self.compParamsHLayout3.addWidget(self.compParam1Label3)
        self.compParam1LineEdit3 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam1LineEdit3.setObjectName("compParam1LineEdit3")
        self.compParamsHLayout3.addWidget(self.compParam1LineEdit3)
        self.compParam2Label3 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam2Label3.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.compParam2Label3.sizePolicy().hasHeightForWidth())
        self.compParam2Label3.setSizePolicy(sizePolicy)
        self.compParam2Label3.setText("")
        self.compParam2Label3.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/alpha.png")))
        self.compParam2Label3.setScaledContents(True)
        self.compParam2Label3.setObjectName("compParam2Label3")
        self.compParamsHLayout3.addWidget(self.compParam2Label3)
        self.compParam2LineEdit3 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam2LineEdit3.setObjectName("compParam2LineEdit3")
        self.compParamsHLayout3.addWidget(self.compParam2LineEdit3)
        self.compParam3Label3 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam3Label3.setText("")
        self.compParam3Label3.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/beta.png")))
        self.compParam3Label3.setObjectName("compParam3Label3")
        self.compParamsHLayout3.addWidget(self.compParam3Label3)
        self.compParam3LineEdit3 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam3LineEdit3.setObjectName("compParam3LineEdit3")
        self.compParamsHLayout3.addWidget(self.compParam3LineEdit3)
        self.gridLayout_2.addLayout(self.compParamsHLayout3, 4, 1, 1, 1)
        self.admmLabel = QtWidgets.QLabel(self.comparisonGroupBox)
        self.admmLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.admmLabel.setObjectName("admmLabel")
        self.gridLayout_2.addWidget(self.admmLabel, 5, 0, 1, 1)
        self.compParamsHLayout4 = QtWidgets.QHBoxLayout()
        self.compParamsHLayout4.setObjectName("compParamsHLayout4")
        self.compParam1Label4 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam1Label4.setText("")
        self.compParam1Label4.setTextFormat(QtCore.Qt.AutoText)
        self.compParam1Label4.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/rho.png")))
        self.compParam1Label4.setScaledContents(True)
        self.compParam1Label4.setWordWrap(False)
        self.compParam1Label4.setIndent(-1)
        self.compParam1Label4.setObjectName("compParam1Label4")
        self.compParamsHLayout4.addWidget(self.compParam1Label4)
        self.compParam1LineEdit4 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam1LineEdit4.setObjectName("compParam1LineEdit4")
        self.compParamsHLayout4.addWidget(self.compParam1LineEdit4)
        self.compParam2Label4 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam2Label4.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.compParam2Label4.sizePolicy().hasHeightForWidth())
        self.compParam2Label4.setSizePolicy(sizePolicy)
        self.compParam2Label4.setText("")
        self.compParam2Label4.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/gamma.png")))
        self.compParam2Label4.setScaledContents(True)
        self.compParam2Label4.setObjectName("compParam2Label4")
        self.compParamsHLayout4.addWidget(self.compParam2Label4)
        self.compParam2LineEdit4 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam2LineEdit4.setObjectName("compParam2LineEdit4")
        self.compParamsHLayout4.addWidget(self.compParam2LineEdit4)
        self.compParam3Label4 = QtWidgets.QLabel(self.comparisonGroupBox)
        self.compParam3Label4.setText("")
        self.compParam3Label4.setPixmap(QtGui.QPixmap(solve_path("assets/parameters/lambda.png")))
        self.compParam3Label4.setObjectName("compParam3Label4")
        self.compParamsHLayout4.addWidget(self.compParam3Label4)
        self.compParam3LineEdit4 = QtWidgets.QLineEdit(self.comparisonGroupBox)
        self.compParam3LineEdit4.setObjectName("compParam3LineEdit4")
        self.compParamsHLayout4.addWidget(self.compParam3LineEdit4)
        self.gridLayout_2.addLayout(self.compParamsHLayout4, 5, 1, 1, 1)
        self.mainLayout.addWidget(self.comparisonGroupBox)

        self.samplingGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.samplingGroupBox.setObjectName("samplingGroupBox")
        self.samplingGroupBoxVLayout = QtWidgets.QVBoxLayout(self.samplingGroupBox)
        self.samplingGroupBoxVLayout.setObjectName("samplingGroupBoxVLayout")
        self.samplingHLayout = QtWidgets.QHBoxLayout()
        self.samplingHLayout.setObjectName("samplingHLayout")
        self.samplingTypeLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.samplingTypeLabel.setObjectName("samplingTypeLabel")
        self.samplingHLayout.addWidget(self.samplingTypeLabel)
        self.samplingTypeComboBox = QtWidgets.QComboBox(self.samplingGroupBox)
        self.samplingTypeComboBox.setObjectName("samplingTypeComboBox")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingTypeComboBox.addItem("")
        self.samplingHLayout.addWidget(self.samplingTypeComboBox)
        self.compressLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.compressLabel.setObjectName("compressLabel")
        self.samplingHLayout.addWidget(self.compressLabel)
        self.compressSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.compressSpinBox.setPrefix("")
        self.compressSpinBox.setMinimum(7)
        self.compressSpinBox.setMaximum(99)
        self.compressSpinBox.setProperty("value", 50)
        self.compressSpinBox.setObjectName("compressSpinBox")
        self.samplingHLayout.addWidget(self.compressSpinBox)
        self.samplingHLayout.setStretch(1, 4)
        self.samplingHLayout.setStretch(3, 2)
        self.samplingGroupBoxVLayout.addLayout(self.samplingHLayout)
        self.samplingHLine = QtWidgets.QFrame(self.samplingGroupBox)
        self.samplingHLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.samplingHLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.samplingHLine.setObjectName("samplingHLine")
        self.samplingGroupBoxVLayout.addWidget(self.samplingHLine)
        self.elementHLayout = QtWidgets.QHBoxLayout()
        self.elementHLayout.setObjectName("elementHLayout")
        self.elementLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.elementLabel.setObjectName("elementLabel")
        self.elementHLayout.addWidget(self.elementLabel)
        self.elementLineEdit = QtWidgets.QLineEdit(self.samplingGroupBox)
        self.elementLineEdit.setObjectName("elementLineEdit")
        self.elementHLayout.addWidget(self.elementLineEdit)
        self.samplingGroupBoxVLayout.addLayout(self.elementHLayout)
        self.jitterHLayout = QtWidgets.QHBoxLayout()
        self.jitterHLayout.setObjectName("jitterHLayout")
        self.gammaLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.gammaLabel.setText("")
        self.gammaLabel.setPixmap(QtGui.QPixmap("assets/parameters/gamma.png"))
        self.gammaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.gammaLabel.setObjectName("gammaLabel")
        self.jitterHLayout.addWidget(self.gammaLabel)
        self.gammaSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.gammaSpinBox.setMinimum(2)
        self.gammaSpinBox.setMaximum(999)
        self.gammaSpinBox.setSingleStep(2)
        self.gammaSpinBox.setValue(3)
        self.gammaSpinBox.setObjectName("gammaSpinBox")
        self.jitterHLayout.addWidget(self.gammaSpinBox)
        self.epsilonLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.epsilonLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.epsilonLabel.setText("")
        self.epsilonLabel.setPixmap(QtGui.QPixmap("assets/parameters/epsilon.png"))
        self.epsilonLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.epsilonLabel.setWordWrap(False)
        self.epsilonLabel.setObjectName("epsilonLabel")
        self.jitterHLayout.addWidget(self.epsilonLabel)
        self.epsilonSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.epsilonSpinBox.setMinimum(1)
        self.epsilonSpinBox.setMaximum(999)
        self.epsilonSpinBox.setSingleStep(2)
        self.epsilonSpinBox.setObjectName("epsilonSpinBox")
        self.jitterHLayout.addWidget(self.epsilonSpinBox)
        self.jitterPushButton = QtWidgets.QPushButton(self.samplingGroupBox)
        self.jitterPushButton.setText("")
        self.jitterPushButton.setIcon(icon)
        self.jitterPushButton.setObjectName("jitterPushButton")
        self.jitterHLayout.addWidget(self.jitterPushButton)
        self.jitterHLayout.setStretch(0, 2)
        self.jitterHLayout.setStretch(1, 4)
        self.jitterHLayout.setStretch(2, 2)
        self.jitterHLayout.setStretch(3, 4)
        self.samplingGroupBoxVLayout.addLayout(self.jitterHLayout)
        self.sdHLayout = QtWidgets.QHBoxLayout()
        self.sdHLayout.setObjectName("sdHLayout")
        self.spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.sdHLayout.addItem(self.spacerItem4)
        self.seedHLayout = QtWidgets.QHBoxLayout()
        self.seedHLayout.setObjectName("seedHLayout")
        self.seedCheckBox = QtWidgets.QCheckBox(self.samplingGroupBox)
        self.seedCheckBox.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.seedCheckBox.setObjectName("seedCheckBox")
        self.seedHLayout.addWidget(self.seedCheckBox)
        self.seedLabel = QtWidgets.QLabel(self.samplingGroupBox)
        self.seedLabel.setObjectName("seedLabel")
        self.seedHLayout.addWidget(self.seedLabel)
        self.seedSpinBox = QtWidgets.QSpinBox(self.samplingGroupBox)
        self.seedSpinBox.setEnabled(False)
        self.seedSpinBox.setSuffix("")
        self.seedSpinBox.setPrefix("")
        self.seedSpinBox.setMinimum(-999)
        self.seedSpinBox.setMaximum(999)
        self.seedSpinBox.setObjectName("seedSpinBox")
        self.seedHLayout.addWidget(self.seedSpinBox)
        self.sdHLayout.addLayout(self.seedHLayout)
        self.spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.sdHLayout.addItem(self.spacerItem5)
        self.samplingGroupBoxVLayout.addLayout(self.sdHLayout)
        self.mainLayout.addWidget(self.samplingGroupBox)
        self.runGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.runGroupBox.setObjectName("runGroupBox")
        self.runGroupBoxVLayout = QtWidgets.QVBoxLayout(self.runGroupBox)
        self.runGroupBoxVLayout.setObjectName("runGroupBoxVLayout")
        self.saveAsHLayout = QtWidgets.QHBoxLayout()
        self.saveAsHLayout.setObjectName("saveAsHLayout")
        self.saveAsLabel = QtWidgets.QLabel(self.runGroupBox)
        self.saveAsLabel.setObjectName("saveAsLabel")
        self.saveAsHLayout.addWidget(self.saveAsLabel)
        self.saveAsLineEdit = QtWidgets.QLineEdit(self.runGroupBox)
        self.saveAsLineEdit.setObjectName("saveAsLineEdit")
        self.saveAsHLayout.addWidget(self.saveAsLineEdit)
        self.saveAsPushButton = QtWidgets.QPushButton(self.runGroupBox)
        self.saveAsPushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(solve_path("assets/icons/save.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveAsPushButton.setIcon(icon1)
        self.saveAsPushButton.setObjectName("saveAsPushButton")
        self.saveAsHLayout.addWidget(self.saveAsPushButton)
        self.runGroupBoxVLayout.addLayout(self.saveAsHLayout)
        self.startHLayout = QtWidgets.QHBoxLayout()
        self.startHLayout.setSpacing(6)
        self.startHLayout.setObjectName("startHLayout")
        self.experimentProgressBar = QtWidgets.QProgressBar(self.runGroupBox)
        self.experimentProgressBar.setProperty("value", 0)
        self.experimentProgressBar.setObjectName("experimentProgressBar")
        self.startHLayout.addWidget(self.experimentProgressBar)
        self.startPushButton = QtWidgets.QPushButton(self.runGroupBox)
        self.startPushButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(solve_path("assets/icons/run.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.startPushButton.setIcon(icon2)
        self.startPushButton.setObjectName("startPushButton")
        self.startHLayout.addWidget(self.startPushButton)
        self.runGroupBoxVLayout.addLayout(self.startHLayout)
        self.mainLayout.addWidget(self.runGroupBox)
        self.resultGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.resultGroupBox.setObjectName("resultGroupBox")
        self.resultGroupBoxHLayout = QtWidgets.QVBoxLayout(self.resultGroupBox)
        self.resultGroupBoxHLayout.setObjectName("resultGroupBoxHLayout")
        self.resultHLayout = QtWidgets.QHBoxLayout()
        self.resultHLayout.setObjectName("resultHLayout")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.resultHLayout.addItem(spacerItem6)
        self.resultLabel = QtWidgets.QLabel(self.resultGroupBox)
        self.resultLabel.setObjectName("resultLabel")
        self.resultHLayout.addWidget(self.resultLabel)
        self.resultPushButton = QtWidgets.QPushButton(self.resultGroupBox)
        self.resultPushButton.setAutoFillBackground(False)
        self.resultPushButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(solve_path("assets/icons/report.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.resultPushButton.setIcon(icon3)
        self.resultPushButton.setAutoDefault(False)
        self.resultPushButton.setDefault(False)
        self.resultPushButton.setFlat(False)
        self.resultPushButton.setObjectName("resultPushButton")
        self.resultHLayout.addWidget(self.resultPushButton)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.resultHLayout.addItem(spacerItem7)
        self.resultHLayout.setStretch(0, 1)
        self.resultHLayout.setStretch(1, 1)
        self.resultHLayout.setStretch(2, 1)
        self.resultHLayout.setStretch(3, 1)
        self.resultGroupBoxHLayout.addLayout(self.resultHLayout)
        self.mainLayout.addWidget(self.resultGroupBox)
        self.centralWidgetHLayout.addLayout(self.mainLayout)
        self.experimentsVLayout = QtWidgets.QVBoxLayout()
        self.experimentsVLayout.setObjectName("experimentsVLayout")
        self.resultsToolBox = QtWidgets.QToolBox(self.centralwidget)
        self.resultsToolBox.setObjectName("resultsToolBox")
        self.performancePage = QtWidgets.QWidget()
        self.performancePage.setGeometry(QtCore.QRect(0, 0, 1098, 390))
        self.performancePage.setObjectName("performancePage")
        self.performancePageVLayout = QtWidgets.QVBoxLayout(self.performancePage)
        self.performancePageVLayout.setObjectName("performancePageVLayout")
        self.performanceTabWidget = QtWidgets.QTabWidget(self.performancePage)
        self.performanceTabWidget.setObjectName("performanceTabWidget")
        self.expPerformanceTab1 = QtWidgets.QWidget()
        self.expPerformanceTab1.setObjectName("expPerformanceTab1")
        self.expPerformanceTab1HLayout = QtWidgets.QHBoxLayout(self.expPerformanceTab1)
        self.expPerformanceTab1HLayout.setObjectName("expPerformanceTab1HLayout")
        self.graphicPerformanceWidget = QtWidgets.QWidget(self.expPerformanceTab1)
        self.graphicPerformanceWidget.setObjectName("graphicPerformanceWidget")
        self.graphicPerformanceWidgetVLayout = QtWidgets.QVBoxLayout(self.graphicPerformanceWidget)
        self.graphicPerformanceWidgetVLayout.setContentsMargins(0, 0, 0, 0)
        self.graphicPerformanceWidgetVLayout.setSpacing(0)
        self.graphicPerformanceWidgetVLayout.setObjectName("graphicPerformanceWidgetVLayout")
        self.graphicPerformanceVLayout = QtWidgets.QVBoxLayout()
        self.graphicPerformanceVLayout.setSpacing(0)
        self.graphicPerformanceVLayout.setObjectName("graphicPerformanceVLayout")
        self.graphicPerformanceWidgetVLayout.addLayout(self.graphicPerformanceVLayout)
        self.expPerformanceTab1HLayout.addWidget(self.graphicPerformanceWidget)
        self.expPerformanceTab1HLayout.setStretch(0, 9)
        self.performanceTabWidget.addTab(self.expPerformanceTab1, "")
        self.performancePageVLayout.addWidget(self.performanceTabWidget)
        self.resultsToolBox.addItem(self.performancePage, "")
        self.reportPage = QtWidgets.QWidget()
        self.reportPage.setGeometry(QtCore.QRect(0, 0, 1098, 390))
        self.reportPage.setObjectName("reportPage")
        self.reportPageVLayout = QtWidgets.QVBoxLayout(self.reportPage)
        self.reportPageVLayout.setObjectName("reportPageVLayout")
        self.reportTabWidget = QtWidgets.QTabWidget(self.reportPage)
        self.reportTabWidget.setObjectName("reportTabWidget")
        self.expReportTab1 = QtWidgets.QWidget()
        self.expReportTab1.setObjectName("expReportTab1")
        self.expReportTab1VLayout = QtWidgets.QVBoxLayout(self.expReportTab1)
        self.expReportTab1VLayout.setObjectName("expReportTab1VLayout")
        self.graphicReportWidget = QtWidgets.QWidget(self.expReportTab1)
        self.graphicReportWidget.setObjectName("graphicReportWidget")
        self.graphicReportWidgetVLayout = QtWidgets.QVBoxLayout(self.graphicReportWidget)
        self.graphicReportWidgetVLayout.setContentsMargins(0, 0, 0, 0)
        self.graphicReportWidgetVLayout.setSpacing(0)
        self.graphicReportWidgetVLayout.setObjectName("graphicReportWidgetVLayout")
        self.graphicReportVLayout = QtWidgets.QVBoxLayout()
        self.graphicReportVLayout.setObjectName("graphicReportVLayout")
        self.graphicReportWidgetVLayout.addLayout(self.graphicReportVLayout)
        self.expReportTab1VLayout.addWidget(self.graphicReportWidget)
        self.reportTabWidget.addTab(self.expReportTab1, "")
        self.reportPageVLayout.addWidget(self.reportTabWidget)
        self.resultsToolBox.addItem(self.reportPage, "")
        self.experimentsVLayout.addWidget(self.resultsToolBox)
        self.tuningTabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tuningTabWidget.setObjectName("tuningTabWidget")
        self.expTuningReportTab1 = QtWidgets.QWidget()
        self.expTuningReportTab1.setObjectName("expTuningReportTab1")
        self.expTuningReportTab1VLayout = QtWidgets.QVBoxLayout(self.expTuningReportTab1)
        self.expTuningReportTab1VLayout.setObjectName("expTuningReportTab1VLayout")
        self.graphicTuningReportWidget = QtWidgets.QWidget(self.expTuningReportTab1)
        self.graphicTuningReportWidget.setObjectName("graphicTuningReportWidget")
        self.graphicTuningReportWidgetVLayout = QtWidgets.QVBoxLayout(self.graphicTuningReportWidget)
        self.graphicTuningReportWidgetVLayout.setContentsMargins(0, 0, 0, 0)
        self.graphicTuningReportWidgetVLayout.setSpacing(0)
        self.graphicTuningReportWidgetVLayout.setObjectName("graphicTuningReportWidgetVLayout")
        self.graphicTuningReportVLayout = QtWidgets.QVBoxLayout()
        self.graphicTuningReportVLayout.setObjectName("graphicTuningReportVLayout")
        self.graphicTuningReportWidgetVLayout.addLayout(self.graphicTuningReportVLayout)
        self.expTuningReportTab1VLayout.addWidget(self.graphicTuningReportWidget)
        self.tuningTabWidget.addTab(self.expTuningReportTab1, "")
        self.experimentsVLayout.addWidget(self.tuningTabWidget)

        self.comparisonsToolBox = QtWidgets.QToolBox(self.centralwidget)
        self.comparisonsToolBox.setObjectName("comparisonsToolBox")
        self.comparisonPerformancePage = QtWidgets.QWidget()
        self.comparisonPerformancePage.setGeometry(QtCore.QRect(0, 0, 1042, 256))
        self.comparisonPerformancePage.setObjectName("comparisonPerformancePage")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.comparisonPerformancePage)
        self.verticalLayout.setObjectName("verticalLayout")
        self.comparisonPerformanceTabWidget = QtWidgets.QTabWidget(self.comparisonPerformancePage)
        self.comparisonPerformanceTabWidget.setObjectName("comparisonPerformanceTabWidget")
        self.expComparisonPerformanceTab1 = QtWidgets.QWidget()
        self.expComparisonPerformanceTab1.setObjectName("expComparisonPerformanceTab1")
        self.expPerformanceTab1HLayout_2 = QtWidgets.QHBoxLayout(self.expComparisonPerformanceTab1)
        self.expPerformanceTab1HLayout_2.setObjectName("expPerformanceTab1HLayout_2")
        self.graphicComparisonPerformanceWidget = QtWidgets.QWidget(self.expComparisonPerformanceTab1)
        self.graphicComparisonPerformanceWidget.setObjectName("graphicComparisonPerformanceWidget")
        self.graphicPerformanceWidgetVLayout_2 = QtWidgets.QVBoxLayout(self.graphicComparisonPerformanceWidget)
        self.graphicPerformanceWidgetVLayout_2.setContentsMargins(0, 0, 0, 0)
        self.graphicPerformanceWidgetVLayout_2.setSpacing(0)
        self.graphicPerformanceWidgetVLayout_2.setObjectName("graphicPerformanceWidgetVLayout_2")
        self.graphicComparisonPerformanceVLayout = QtWidgets.QVBoxLayout()
        self.graphicComparisonPerformanceVLayout.setSpacing(0)
        self.graphicComparisonPerformanceVLayout.setObjectName("graphicComparisonPerformanceVLayout")
        self.graphicPerformanceWidgetVLayout_2.addLayout(self.graphicComparisonPerformanceVLayout)
        self.expPerformanceTab1HLayout_2.addWidget(self.graphicComparisonPerformanceWidget)
        self.expPerformanceTab1HLayout_2.setStretch(0, 9)
        self.comparisonPerformanceTabWidget.addTab(self.expComparisonPerformanceTab1, "")
        self.verticalLayout.addWidget(self.comparisonPerformanceTabWidget)
        self.comparisonsToolBox.addItem(self.comparisonPerformancePage, "")
        self.comparisonReportPage = QtWidgets.QWidget()
        self.comparisonReportPage.setGeometry(QtCore.QRect(0, 0, 1042, 256))
        self.comparisonReportPage.setObjectName("comparisonReportPage")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.comparisonReportPage)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.comparisonReportTabWidget = QtWidgets.QTabWidget(self.comparisonReportPage)
        self.comparisonReportTabWidget.setObjectName("comparisonReportTabWidget")
        self.expComparisonReportTab1 = QtWidgets.QWidget()
        self.expComparisonReportTab1.setObjectName("expComparisonReportTab1")
        self.expPerformanceTab1HLayout_3 = QtWidgets.QHBoxLayout(self.expComparisonReportTab1)
        self.expPerformanceTab1HLayout_3.setObjectName("expPerformanceTab1HLayout_3")
        self.graphicComparisonReportWidget = QtWidgets.QWidget(self.expComparisonReportTab1)
        self.graphicComparisonReportWidget.setObjectName("graphicComparisonReportWidget")
        self.graphicPerformanceWidgetVLayout_3 = QtWidgets.QVBoxLayout(self.graphicComparisonReportWidget)
        self.graphicPerformanceWidgetVLayout_3.setContentsMargins(0, 0, 0, 0)
        self.graphicPerformanceWidgetVLayout_3.setSpacing(0)
        self.graphicPerformanceWidgetVLayout_3.setObjectName("graphicPerformanceWidgetVLayout_3")
        self.graphicComparisonReportVLayout = QtWidgets.QVBoxLayout()
        self.graphicComparisonReportVLayout.setSpacing(0)
        self.graphicComparisonReportVLayout.setObjectName("graphicComparisonReportVLayout")
        self.graphicPerformanceWidgetVLayout_3.addLayout(self.graphicComparisonReportVLayout)
        self.expPerformanceTab1HLayout_3.addWidget(self.graphicComparisonReportWidget)
        self.expPerformanceTab1HLayout_3.setStretch(0, 9)
        self.comparisonReportTabWidget.addTab(self.expComparisonReportTab1, "")
        self.verticalLayout_2.addWidget(self.comparisonReportTabWidget)
        self.comparisonsToolBox.addItem(self.comparisonReportPage, "")
        self.experimentsVLayout.addWidget(self.comparisonsToolBox)
        self.centralWidgetHLayout.addLayout(self.experimentsVLayout)
        self.centralWidgetHLayout.setStretch(0, 1)
        self.centralWidgetHLayout.setStretch(1, 10)
        self.setCentralWidget(self.centralwidget)

        self.toolBar = QtWidgets.QToolBar(self)
        self.toolBar.setObjectName("toolBar")
        self.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.aboutOfAction = QtWidgets.QAction(self)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(solve_path("assets/icons/info.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.aboutOfAction.setIcon(icon4)
        self.aboutOfAction.setObjectName("aboutOfAction")
        self.reportAction = QtWidgets.QAction(self)
        self.reportAction.setIcon(icon3)
        self.reportAction.setObjectName("reportAction")
        self.mainAction = QtWidgets.QAction(self)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(solve_path("assets/icons/main.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.mainAction.setIcon(icon5)
        self.mainAction.setObjectName("mainAction")
        self.tuningAction = QtWidgets.QAction(self)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(solve_path("assets/icons/tuning.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tuningAction.setIcon(icon6)
        self.tuningAction.setObjectName("tuningAction")
        self.comparisonAction = QtWidgets.QAction(self)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(solve_path("assets/icons/comparison.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.comparisonAction.setIcon(icon7)
        self.comparisonAction.setObjectName("comparisonAction")
        self.toolBar.addAction(self.mainAction)
        self.toolBar.addAction(self.tuningAction)
        self.toolBar.addAction(self.comparisonAction)
        self.toolBar.addAction(self.aboutOfAction)

        self.retranslateUi()
        self.resultsToolBox.setCurrentIndex(0)
        self.performanceTabWidget.setCurrentIndex(0)
        self.reportTabWidget.setCurrentIndex(0)
        self.tuningTabWidget.setCurrentIndex(0)
        self.comparisonsToolBox.setCurrentIndex(0)
        self.comparisonPerformanceTabWidget.setCurrentIndex(0)
        self.comparisonReportTabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

        # others
        self.init_global_variables()
        self.init_actions()
        self.init_graphics()
        self.init_visible_widgets()

    def init_visible_widgets(self):
        width = 320
        self.inputGroupBox.setMinimumWidth(width)
        self.inputGroupBox.setMaximumWidth(width)
        self.algorithmGroupBox.setMinimumWidth(width)
        self.algorithmGroupBox.setMaximumWidth(width)
        self.samplingGroupBox.setMaximumWidth(width)
        self.comparisonGroupBox.setMaximumWidth(width)
        self.runGroupBox.setMaximumWidth(width)

        algorithm = self.algorithmComboBox.currentText().lower()
        tuning_type = self.paramTuningComboBox.currentText().lower()

        self.update_main_visible_algorithms(algorithm)
        self.update_tuning_visible_algorithms(algorithm, tuning_type)

        self.tuningGroupBox.setVisible(False)
        self.tuningTabWidget.setVisible(False)
        self.comparisonsToolBox.setVisible(False)
        self.comparisonGroupBox.setVisible(False)
        self.paramComboBox.view().setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        self.elementLabel.setVisible(False)
        self.elementLineEdit.setVisible(False)
        self.gammaLabel.setVisible(False)
        self.gammaSpinBox.setVisible(False)
        self.epsilonLabel.setVisible(False)
        self.epsilonSpinBox.setVisible(False)
        self.jitterPushButton.setVisible(False)

    def init_global_variables(self):
        # Tab mode ['main', 'tuning', 'comparison']
        # View mode ['normal', 'report']

        self.global_variables = dict(tab_mode='main', view_mode='normal', algorithm_name='')
        self.directories = dict(main=dict(uploaded='', temp_saved='', saved='', report=''),
                                tuning=dict(uploaded='', temp_saved='', saved='', report=''),
                                comparison=dict(uploaded='', temp_saved='', saved='', report=''))
        self.state = dict(main=dict(progress=dict(iteration=[], error=[], psnr=[], ssim=[])),
                          tuning=dict(progress=dict(total_runs=0, fixed_params='', current_scale='')),
                          comparison=dict(progress=dict(iteration=[], errors=[], psnrs=[], ssims=[])))

        self.icons_path = 'assets/parameters'

        lmb = 'lambda'
        mu = 'mu'
        rho = 'rho'
        alpha = 'alpha'
        beta = 'beta'
        gamma = 'gamma'

        self.param_type = ['init', 'end', 'list']

        self.params = dict(fista=[[lmb, 0.1, 0.5], [mu, 0.3, 0.7]],
                           gap=[[lmb, 1.0, 1.5]],
                           twist=[[lmb, 0.9, 1.5], [alpha, 1.2, 1.7], [beta, 1.998, 2.3]],
                           admm=[[rho, 0.5, 1.5], [gamma, 1.0, 1.7], [lmb, 0.0078, 0.009]])

        self.main_params = [[self.param1Label, self.param1LineEdit],
                            [self.param2Label, self.param2LineEdit],
                            [self.param3Label, self.param3LineEdit]]

        self.tuning_params = [[self.param1InitLabel, self.param1InitLineEdit,
                               self.param1EndLabel, self.param1EndLineEdit],
                              [self.param2InitLabel, self.param2InitLineEdit,
                               self.param2EndLabel, self.param2EndLineEdit],
                              [self.param3InitLabel, self.param3InitLineEdit,
                               self.param3EndLabel, self.param3EndLineEdit]]

        self.comparison_params = [[self.compParam1LineEdit1, self.compParam2LineEdit1],
                                  [self.compParam1LineEdit2],
                                  [self.compParam1LineEdit3, self.compParam2LineEdit3, self.compParam3LineEdit3],
                                  [self.compParam1LineEdit4, self.compParam2LineEdit4, self.compParam3LineEdit4]]

    def init_actions(self):
        self.onlydouble = QtGui.QDoubleValidator(decimals=10)
        self.onlyInt = QtGui.QIntValidator()
        self.experimentProgressBar.setValue(0)

        # tab
        self.mainAction.triggered.connect(self.show_main)
        self.tuningAction.triggered.connect(self.show_tuning)
        self.comparisonAction.triggered.connect(self.show_comparison)
        self.aboutOfAction.triggered.connect(self.show_about_of)

        # algorithms

        self.algorithmComboBox.currentTextChanged.connect(self.algorithm_changed)
        self.algorithmPushButton.clicked.connect(self.algorithm_equation_clicked)
        self.comparisonAlgorithmPushButton.clicked.connect(self.comparison_algorithm_equation_clicked)

        # tuning
        self.paramTuningComboBox.currentTextChanged.connect(self.param_tuning_changed)
        self.paramComboBox.currentTextChanged.connect(self.param_changed)
        self.jitterPushButton.clicked.connect(self.jitter_sampling_clicked)

        # sampling
        self.samplingTypeComboBox.currentTextChanged.connect(self.on_sampling_changed)

        # buttons

        self.loadPushButton.clicked.connect(self.load_files)
        self.saveAsPushButton.clicked.connect(self.save_files)
        self.saveAsLineEdit.editingFinished.connect(self.save_as_text_changed)
        self.startPushButton.clicked.connect(self.start_experiment)
        self.resultPushButton.clicked.connect(self.show_results)

        self.seedCheckBox.stateChanged.connect(self.activate_seed)

    def init_graphics(self):

        ## Main

        # performance graphic

        self.performanceGraphic = PerformanceGraphic()
        self.performanceToolbar = NavigationToolbar(self.performanceGraphic, self)
        # self.performanceToolbar = CustomToolbar(self.performanceGraphic, self)
        self.graphicPerformanceVLayout.addWidget(self.performanceToolbar)
        self.graphicPerformanceVLayout.addWidget(self.performanceGraphic)

        # report graphic

        self.reconstructionGraphic = ReconstructionGraphic()
        # self.reportToolbar = NavigationToolbar(self.reconstructionGraphic, self)
        self.reportToolbar = CustomToolbar(self.reconstructionGraphic, self)
        self.graphicReportVLayout.addWidget(self.reportToolbar)
        self.graphicReportVLayout.addWidget(self.reconstructionGraphic)

        ## Tuning

        # tuning graphic

        self.tuningGraphic = TuningGraphic()
        # self.tuningToolbar = NavigationToolbar(self.tuningGraphic, self)
        self.tuningToolbar = CustomToolbar(self.tuningGraphic, self)
        self.graphicTuningReportVLayout.addWidget(self.tuningToolbar)
        self.graphicTuningReportVLayout.addWidget(self.tuningGraphic)

        ## Comparison

        # performance graphic

        self.performanceGraphicComparison = ComparisonPerformanceGraphic()
        # self.performanceToolbarComparison = NavigationToolbar(self.performanceGraphicComparison, self)
        self.performanceToolbarComparison = CustomToolbar(self.performanceGraphicComparison, self)
        self.graphicComparisonPerformanceVLayout.addWidget(self.performanceToolbarComparison)
        self.graphicComparisonPerformanceVLayout.addWidget(self.performanceGraphicComparison)

        # report graphic

        self.reconstructionGraphicComparison = ComparisonReconstructionGraphic()
        # self.reportToolbarComparison = NavigationToolbar(self.reconstructionGraphicComparison, self)
        self.reportToolbarComparison = CustomToolbar(self.reconstructionGraphicComparison, self)
        self.graphicComparisonReportVLayout.addWidget(self.reportToolbarComparison)
        self.graphicComparisonReportVLayout.addWidget(self.reconstructionGraphicComparison)

    def update_main_visible_algorithms(self, algorithm):
        for i in range(3):
            label = self.main_params[i][0]
            line_edit = self.main_params[i][1]

            comparison = i < len(self.params[algorithm])
            if comparison:
                param_names = self.params[algorithm][i][0]
                icon_path = f'{self.icons_path}/{param_names}.png'

                value = str(self.params[algorithm][i][1])

                label.setPixmap(QtGui.QPixmap(solve_path(icon_path)))
                line_edit.setText(value)

            comparison1 = True if comparison else False

            label.setVisible(comparison1)
            line_edit.setVisible(comparison1)

            line_edit.setValidator(self.onlydouble)

    def update_tuning_visible_param(self, param):
        algorithm = self.algorithmComboBox.currentText().lower()
        tuning_type = self.paramTuningComboBox.currentText().lower()
        self.update_tuning_visible_algorithms(algorithm, tuning_type)

    def update_tuning_visible_algorithms(self, algorithm, tuning_type):

        for i in range(3):
            label_init = self.tuning_params[i][0]
            line_edit_init = self.tuning_params[i][1]
            label_end = self.tuning_params[i][2]
            line_edit_end = self.tuning_params[i][3]

            comparison1 = i < len(self.params[algorithm])
            if comparison1:
                param_names = self.params[algorithm][i][0]
                icon_path = f'{self.icons_path}/{param_names}'

                icon_path_init = f'{icon_path}_{self.param_type[0]}.png'
                icon_path_end = f'{icon_path}_{self.param_type[1]}.png'
                icon_path_list = f'{icon_path}_{self.param_type[2]}.png'

                value_init = str(self.params[algorithm][i][1])
                value_end = str(self.params[algorithm][i][2])

                label_init.setPixmap(
                    QtGui.QPixmap(solve_path(icon_path_init if tuning_type == 'intervalo' else icon_path_list)))
                label_end.setPixmap(QtGui.QPixmap(solve_path(icon_path_end)))

                line_edit_init.setText(value_init)
                line_edit_end.setText(value_end)

            comparison2 = True if tuning_type == 'intervalo' else False

            comparison3 = True if comparison1 else False
            comparison4 = True if comparison1 and comparison2 else False

            label_init.setVisible(comparison3)
            line_edit_init.setVisible(comparison3)

            label_end.setVisible(comparison4)
            line_edit_end.setVisible(comparison4)

            line_edit_init.setValidator(self.onlydouble if tuning_type == 'intervalo' else None)
            line_edit_end.setValidator(self.onlydouble if tuning_type == 'intervalo' else None)

            if i != self.paramComboBox.currentIndex():
                label_init.setPixmap(QtGui.QPixmap(solve_path(icon_path)))
                label_end.setVisible(False)
                line_edit_end.setVisible(False)

    def set_visible_algorithm(self, algorithm):
        algorithm = algorithm.lower()

        if self.global_variables['tab_mode'] == 'main':
            self.update_main_visible_algorithms(algorithm)

        else:
            count = 0
            for i in range(3):
                if i < len(self.params[algorithm]):
                    param_names = self.params[algorithm][i][0]
                    icon_path = f'{self.icons_path}/{param_names}.png'

                    self.paramComboBox.setItemIcon(i, QtGui.QIcon(icon_path))
                    count += 1

            self.paramComboBox.setCurrentIndex(0)
            self.paramComboBox.setMaxVisibleItems(count)

            tuning_param = self.paramTuningComboBox.currentText().lower()
            self.update_tuning_visible_algorithms(algorithm, tuning_param)

    def load_files(self):
        kwargs = {}
        if 'SNAP' in os.environ:
            kwargs['options'] = QtWidgets.QFileDialog.DontUseNativeDialog

        view_directory = self.global_variables['view_mode']

        uploaded_directory = self.directories[self.global_variables['tab_mode']][
            view_directory if view_directory == 'report' else 'uploaded']

        if view_directory == 'normal':
            message = 'Abrir dato sísmico'
            file_type = 'npy'
        else:  # 'report'
            message = 'Abrir datos sísmicos reconstruidos'
            file_type = 'npz'

        self.data_fname = QtWidgets.QFileDialog.getOpenFileName(self, message, uploaded_directory,
                                                                filter=f'numpy file (*.{file_type});;matlab file (*.mat)',
                                                                **kwargs)

        if self.data_fname[0] == '':
            return

        if view_directory == 'normal':
            self.directories[self.global_variables['tab_mode']]['uploaded'] = self.data_fname[0]
            self.update_data_tree(self.directories[self.global_variables['tab_mode']]['uploaded'])
        else:
            self.directories[self.global_variables['tab_mode']]['report'] = self.data_fname[0]

            tab_mode = self.global_variables['tab_mode']
            if tab_mode == 'main':
                try:
                    data = np.load(self.data_fname[0], allow_pickle=True)
                    performance_data = {item[0]: item[1] for item in data['performance_data']}

                    self.performanceGraphic.update_values(**performance_data)
                    self.performanceGraphic.update_figure()

                    self.reconstructionGraphic.update_report(data)
                    self.reconstructionGraphic.update_figure()

                except BaseException as err:
                    msg = f"Unexpected {err=}, {type(err)=}"
                    showCritical(
                        "Se intentó cargar un resultados que no corresponden a la herramienta actual."
                        "Por favor, solo cargue resultados obtenidos en el menú principal", details=msg)
                    return

            elif tab_mode == 'tuning':
                try:
                    data = np.load(self.data_fname[0], allow_pickle=True)
                    self.algorithm_name = str(data['algorithm']).lower()
                    self.tuning_data = pd.DataFrame({item[0]: item[1] for item in data['tuning_data']})
                    self.fixed_params = {item[0]: item[1] for item in data['fixed_params']}
                    self.current_scale = str(data['scale']).lower()

                    self.tuningGraphic.update_tuning(self.algorithm_name, self.tuning_data, self.fixed_params,
                                                     self.current_scale)
                    self.tuningGraphic.update_figure()

                except BaseException as err:
                    msg = f"Unexpected {err=}, {type(err)=}"
                    showCritical(
                        "Se intentó cargar un resultados que no corresponden a la herramienta actual."
                        "Por favor, solo cargue resultados obtenidos en el menú de ajuste de parámetros", details=msg)
                    return

            else:
                try:
                    data = np.load(self.data_fname[0], allow_pickle=True)
                    comparison_data = {item[0]: item[1] for item in data['comparison_data']}

                    self.performanceGraphicComparison.update_values(**comparison_data)
                    self.performanceGraphicComparison.update_figure()

                    self.reconstructionGraphicComparison.update_report(data)
                    self.reconstructionGraphicComparison.update_figure()

                except BaseException as err:
                    msg = f"Unexpected {err=}, {type(err)=}"
                    showCritical(
                        "Se intentó cargar un resultados que no corresponden a la herramienta actual."
                        "Por favor, solo cargue resultados obtenidos en el menú de comparaciones", details=msg)
                    return

            self.update_data_tree(self.directories[self.global_variables['tab_mode']]['report'])

    def save_files(self):
        kwargs = {}
        if 'SNAP' in os.environ:
            kwargs['options'] = QFileDialog.DontUseNativeDialog

        directories = self.directories[self.global_variables['tab_mode']]
        temp_saved_directory = directories['temp_saved']
        if temp_saved_directory == '':
            temp_saved_directory = directories['uploaded']

        save_name = QFileDialog.getSaveFileName(self, 'Guardar reconstrucciones', temp_saved_directory,
                                                filter=f'numpy file (*.npz)', **kwargs)
        if save_name[0] == '':
            return

        save_name = f'{save_name[0]}.npz' if not 'npz' in save_name[0] else save_name[0]

        self.saveAsLineEdit.setText(save_name)
        self.directories[self.global_variables['tab_mode']]['temp_saved'] = save_name

    def update_data_tree(self, directory):
        if directory == '':
            self.dataTreeWidget.clear()
            return

        filename = directory.split('/')
        parent_name = filename[-2]
        child_name = filename[-1]

        parent = self.dataTreeWidget.findItems('', Qt.MatchContains | Qt.MatchRecursive)

        if parent:
            parent[0].setText(0, parent_name)
            parent[0].child(0).setText(0, child_name)
            parent[0].setExpanded(True)

        else:
            parent = QtWidgets.QTreeWidgetItem(self.dataTreeWidget)
            parent.setText(0, parent_name)
            child = QtWidgets.QTreeWidgetItem(parent)
            child.setText(0, filename[-1])

            parent.setExpanded(True)

    def save_as_text_changed(self):
        save_name = self.saveAsLineEdit.text()
        if not 'npz' in save_name:
            save_name = f'{save_name}.npz'

        if len(save_name.split('/')) == 1 or len(save_name.split('\\')) == 1:
            path = os.path.expanduser('~/Documents')
            save_name = os.path.join(path, save_name)

        self.saveAsLineEdit.setText(save_name)
        self.directories[self.global_variables['tab_mode']]['temp_saved'] = save_name

    def show_about_of(self):
        self.about_window = QtWidgets.QWidget()
        self.ui_about_window = UIAboutWindow()
        self.ui_about_window.setupUi(self.about_window)
        self.about_window.setWindowModality(Qt.WindowModality.ApplicationModal)
        self.about_window.show()

    def show_main(self):
        self.global_variables['tab_mode'] = 'main'
        view_mode = self.global_variables['view_mode']
        comparison = True if view_mode == 'normal' else False

        self.algorithmGroupBox.setVisible(comparison)
        self.tuningGroupBox.setVisible(False)
        self.comparisonGroupBox.setVisible(False)
        self.resultsToolBox.setVisible(True)
        self.tuningTabWidget.setVisible(False)
        self.comparisonsToolBox.setVisible(False)

        self.set_visible_algorithm(self.algorithmComboBox.currentText().lower())
        self.set_result_view()

    def show_tuning(self):
        self.global_variables['tab_mode'] = 'tuning'
        view_mode = self.global_variables['view_mode']
        comparison = True if view_mode == 'normal' else False

        self.algorithmGroupBox.setVisible(comparison)
        self.tuningGroupBox.setVisible(comparison)
        self.comparisonGroupBox.setVisible(False)
        self.resultsToolBox.setVisible(False)
        self.tuningTabWidget.setVisible(True)
        self.comparisonsToolBox.setVisible(False)

        self.param1Label.setVisible(False)
        self.param1LineEdit.setVisible(False)
        self.param2Label.setVisible(False)
        self.param2LineEdit.setVisible(False)
        self.param3Label.setVisible(False)
        self.param3LineEdit.setVisible(False)

        self.set_visible_algorithm(self.algorithmComboBox.currentText().lower())
        self.set_result_view()

    def show_comparison(self):
        self.global_variables['tab_mode'] = 'comparison'
        view_mode = self.global_variables['view_mode']
        comparison = True if view_mode == 'normal' else False

        self.algorithmGroupBox.setVisible(False)
        self.tuningGroupBox.setVisible(False)
        self.comparisonGroupBox.setVisible(comparison)
        self.resultsToolBox.setVisible(False)
        self.tuningTabWidget.setVisible(False)
        self.comparisonsToolBox.setVisible(True)

        self.set_visible_algorithm(self.algorithmComboBox.currentText().lower())
        self.set_result_view()

    def set_result_view(self):
        mode = self.global_variables['tab_mode']
        if self.directories[mode]['report'] != '':
            if mode == 'main':
                self.performanceGraphic.update_figure()
                self.reconstructionGraphic.update_figure()
            elif mode == 'tuning':
                self.tuningGraphic.update_figure()
            else:
                pass

        if self.global_variables['view_mode'] == 'normal':
            self.saveAsLineEdit.setText(self.directories[self.global_variables['tab_mode']]['temp_saved'])
            self.update_data_tree(self.directories[self.global_variables['tab_mode']]['uploaded'])

        else:
            self.update_data_tree(self.directories[self.global_variables['tab_mode']]['report'])

    def show_results(self):
        icon = QtGui.QIcon()
        if self.global_variables['view_mode'] == 'normal':
            self.global_variables['view_mode'] = 'report'
            self.set_report_view()
            icon.addPixmap(QtGui.QPixmap(solve_path("assets/icons/seismic.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.resultLabel.setText('Realizar experimentos')

        else:
            self.global_variables['view_mode'] = 'normal'
            self.set_main_view()
            icon.addPixmap(QtGui.QPixmap(solve_path("assets/icons/report.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.resultLabel.setText('Ver resultados')

        self.resultPushButton.setIcon(icon)

    def set_main_view(self):
        self.set_visible_algorithm(self.algorithmComboBox.currentText().lower())

        tab_mode = self.global_variables['tab_mode']
        self.algorithmGroupBox.setVisible(True if tab_mode == 'main' else False)
        self.tuningGroupBox.setVisible(True if tab_mode == 'tuning' else False)
        self.samplingGroupBox.setVisible(True)
        self.runGroupBox.setVisible(True)
        self.comparisonGroupBox.setVisible(True if tab_mode == 'comparison' else False)

        _translate = QtCore.QCoreApplication.translate
        self.inputGroupBox.setTitle(_translate("mainWindow", "Datos sísmicos"))

        self.set_result_view()

    def set_report_view(self):
        self.algorithmGroupBox.setVisible(False)
        self.tuningGroupBox.setVisible(False)
        self.samplingGroupBox.setVisible(False)
        self.runGroupBox.setVisible(False)
        self.comparisonGroupBox.setVisible(False)

        _translate = QtCore.QCoreApplication.translate
        self.inputGroupBox.setTitle(_translate("mainWindow", "Datos sísmicos reconstruidos"))

        self.set_result_view()

    def show_tuning_window(self):
        self.ui_tuning_window = UITuningWindow()
        self.ui_tuning_window.setupUi()
        self.ui_tuning_window.show()

    def algorithm_changed(self, value):
        self.set_visible_algorithm(value.lower())

    def algorithm_equation_clicked(self):
        self.ui_equation_window = UIEquationWindow()
        self.ui_equation_window.setupUi(self.algorithmComboBox.currentText())
        self.ui_equation_window.setWindowModality(Qt.WindowModality.ApplicationModal)
        # print(self.ui_equation_window.isModal())
        self.ui_equation_window.show()

    def comparison_algorithm_equation_clicked(self):
        self.ui_comparison_equation_window = UIComparisonEquationWindow()
        self.ui_comparison_equation_window.setupUi()
        self.ui_comparison_equation_window.show()

    def jitter_sampling_clicked(self):
        self.jitter_sampling_window = UIJitterWindow()
        self.jitter_sampling_window.setupUi()
        self.jitter_sampling_window.show()

    def param_tuning_changed(self, value):
        self.paramValuesLabel.setVisible(True if value.lower() == 'intervalo' else False)
        self.paramValuesSpinBox.setVisible(True if value.lower() == 'intervalo' else False)

        algorithm = self.algorithmComboBox.currentText().lower()
        self.update_tuning_visible_algorithms(algorithm, value.lower())

    def param_changed(self, value):
        self.update_tuning_visible_param(value.lower())

    def activate_seed(self, activate):
        self.seedSpinBox.setEnabled(activate)

    def on_sampling_changed(self, value):
        sampling = value.lower()

        self.spacerItem4.changeSize(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.spacerItem5.changeSize(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.samplingHLine.setVisible(False if sampling in 'uniforme' else True)

        visible = True if sampling not in ['jitter', 'lista'] else False
        self.compressLabel.setVisible(visible)
        self.compressSpinBox.setVisible(visible)
        self.compressSpinBox.setMaximum(99 if sampling in ['aleatorio', 'jitter'] else 50)

        visible = True if sampling in ['aleatorio', 'jitter'] else False
        self.seedCheckBox.setVisible(visible)
        self.seedLabel.setVisible(visible)
        self.seedSpinBox.setVisible(visible)

        visible = True if sampling in 'jitter' else False
        self.gammaLabel.setVisible(visible)
        self.gammaSpinBox.setVisible(visible)
        self.epsilonLabel.setVisible(visible)
        self.epsilonSpinBox.setVisible(visible)
        self.jitterPushButton.setVisible(visible)

        visible = True if sampling in 'lista' else False
        self.elementLabel.setVisible(visible)
        self.elementLineEdit.setVisible(visible)

        if sampling in ['aleatorio']:
            self.spacerItem4.changeSize(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.spacerItem5.changeSize(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)

    def verify_parameters(self, uploaded_directory):

        if uploaded_directory == '':
            showWarning("Para iniciar, debe cargar el dato sísmico dando click al boton 'Cargar'")
            return False

        if self.directories[self.global_variables['tab_mode']]['temp_saved'] == '':
            showWarning("Por favor seleccione un nombre de archivo para guardar los resultados del algoritmo.")
            return False

        if self.global_variables['tab_mode'] == 'tuning':
            algorithm = self.algorithmComboBox.currentText().lower()
            tuning_type = self.paramTuningComboBox.currentText().lower()
            fixed_param = self.paramComboBox.currentIndex()

            validate_interval = True
            validate_list = True

            for i in range(len(self.params[algorithm])):
                number_init = self.tuning_params[i][1].text()
                number_end = self.tuning_params[i][3].text()

                i_comparison = i == fixed_param
                if tuning_type == 'intervalo' and i_comparison:
                    validate_interval = float(number_init) < float(number_end)

                if tuning_type == 'lista' and i_comparison:
                    try:
                        lista = [float(number) for number in number_init.replace(' ', '').split(',')]
                        lista.sort()

                        if any(number < 0 for number in lista):
                            validate_list = False

                    except:

                        validate_list = False

            if not validate_interval:
                showWarning("Los parámetros iniciales deben ser menores que los parámetros finales.")
                return False

            if not validate_list:
                showWarning("La sintaxis de la lista no es correcta, verifiquela e ingresela nuevamente.")
                return False

        return True

    def update_variables(self):
        self.experimentProgressBar.setValue(0)

        if self.global_variables['tab_mode'] == 'main':
            self.state[self.global_variables['tab_mode']]['progress']['iteration'] = []
            self.state[self.global_variables['tab_mode']]['progress']['error'] = []
            self.state[self.global_variables['tab_mode']]['progress']['psnr'] = []
            self.state[self.global_variables['tab_mode']]['progress']['ssim'] = []

        elif self.global_variables['tab_mode'] == 'tuning':
            self.state[self.global_variables['tab_mode']]['progress']['total_runs'] = 0
            self.state[self.global_variables['tab_mode']]['progress']['fixed_params'] = {}

        else:
            self.state[self.global_variables['tab_mode']]['progress']['iteration'] = []
            self.state[self.global_variables['tab_mode']]['progress']['errors'] = []
            self.state[self.global_variables['tab_mode']]['progress']['psnrs'] = []
            self.state[self.global_variables['tab_mode']]['progress']['ssims'] = []

        self.maxiter = int(self.maxiterSpinBox.text())

    def load_seismic_data(self, uploaded_directory):
        if Path(uploaded_directory).suffix == '.npy':
            seismic_data = np.load(uploaded_directory)
        else:
            seismic_data = loadmat(uploaded_directory)
            keys = list(seismic_data.keys())
            keys.remove('__header__')
            keys.remove('__version__')
            keys.remove('__globals__')
            seismic_data = seismic_data[keys[0]]

        if seismic_data.ndim > 2:
            seismic_data = seismic_data[..., int(seismic_data.shape[-1] / 2)]
        else:  # only for data.npy
            seismic_data = seismic_data.T

        seismic_data = seismic_data / np.max(np.abs(seismic_data))

        return seismic_data

    def load_parameters(self, seismic_data):
        seed = None
        if self.seedCheckBox.checkState():
            seed = int(self.seedSpinBox.text())

        compression_ratio = float(self.compressSpinBox.text().split('%')[0]) / 100

        mode = self.samplingTypeComboBox.currentText().lower()
        jitter_params = dict(gamma=int(self.gammaSpinBox.text()), epsilon=int(self.epsilonSpinBox.text()))
        lista = self.elementLineEdit

        try:
            self.sampling_dict, H = self.sampling.apply_sampling(seismic_data, mode, jitter_params, lista, seed,
                                                                 compression_ratio)
        except:
            return

        return H

    def load_algorithm(self, seismic_data, H):
        self.algorithm_name = self.algorithmComboBox.currentText().lower()
        tuning_type = self.paramTuningComboBox.currentText().lower()
        fixed_param = self.paramComboBox.currentIndex()
        self.current_scale = self.scaleComboBox.currentText().lower()

        if self.global_variables['tab_mode'] == 'main':
            params = dict(param1=self.param1LineEdit.text(),
                          param2=self.param2LineEdit.text(),
                          param3=self.param3LineEdit.text())

            Alg = Algorithms(seismic_data, H, 'DCT2D', 'IDCT2D')  # Assuming using DCT2D ad IDCT2D for all algorithms
            algorithm, parameters = Alg.get_algorithm(self.algorithm_name, self.maxiter, **params)

            # update worker behaviour
            self.worker = Worker(algorithm, parameters, self.maxiter)

        elif self.global_variables['tab_mode'] == 'tuning':
            param_list = []
            parameters = []

            num_params = len(self.params[self.algorithm_name])
            for i in range(num_params):

                number_init = self.tuning_params[i][1].text()
                number_end = self.tuning_params[i][3].text()

                i_comparison = i == fixed_param
                if tuning_type == 'intervalo':
                    if i_comparison:
                        scale = np.linspace
                        if self.current_scale != 'lineal':
                            scale = np.logspace
                            number_init, number_end = np.log10(float(number_init)), np.log10(float(number_end))

                        param_list.append(list(scale(float(number_init), float(number_end),
                                                     int(self.paramValuesSpinBox.text()))))

                    else:
                        num_init = float(number_init)
                        aux_fixed_param = {self.params[self.algorithm_name][i][0]: num_init}
                        self.state[self.global_variables['tab_mode']]['progress']['fixed_params'].update(
                            aux_fixed_param)
                        param_list.append([num_init])

                if tuning_type == 'lista':
                    if i_comparison:
                        lista = [float(number) for number in number_init.replace(' ', '').split(',')]
                        lista.sort()

                        param_list.append(lista)

                    else:
                        num_init = float(number_init)
                        aux_fixed_param = {self.params[self.algorithm_name][i][0]: num_init}
                        self.state[self.global_variables['tab_mode']]['progress']['fixed_params'].update(
                            aux_fixed_param)
                        param_list.append([num_init])

            func = None
            param_arg_names = ['param1', 'param2', 'param3']
            for ps in product(*param_list):
                aux_params = {param_arg_names[i]: ps[i] for i in range(num_params)}

                Alg = Algorithms(seismic_data, H, 'DCT2D', 'IDCT2D')
                func, params = Alg.get_algorithm(self.algorithm_name, self.maxiter, **aux_params)

                parameters.append(params)

            self.total_num_run = len(parameters)

            # update worker behaviour
            self.worker = TuningWorker(func, parameters, self.maxiter)

        else:
            funcs = []
            param_list = []

            algorithm_names = ['fista', 'gap', 'twist', 'admm']
            param_arg_names = ['param1', 'param2', 'param3']
            for alg_name, params in zip(algorithm_names, self.comparison_params):
                aux_params = {param_arg_names[i]: param.text() for i, param in enumerate(params)}

                Alg = Algorithms(seismic_data, H, 'DCT2D', 'IDCT2D')
                func, params = Alg.get_algorithm(alg_name, self.maxiter, **aux_params)

                funcs.append(func)
                param_list.append(params)

            self.worker = ComparisonWorker(funcs, param_list, self.maxiter)

    def start_experiment(self):

        uploaded_directory = self.directories[self.global_variables['tab_mode']]['uploaded']
        validate = self.verify_parameters(uploaded_directory)

        if not validate:
            return

        try:
            self.update_variables()
            seismic_data = self.load_seismic_data(uploaded_directory)
            H = self.load_parameters(seismic_data)
            self.load_algorithm(seismic_data, H)

            # run experiment in a thread

            self.thread = QtCore.QThread()
            self.worker.moveToThread(self.thread)

            self.thread.started.connect(self.worker.run)
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.worker.deleteLater)
            self.thread.finished.connect(self.thread.deleteLater)

            tab_mode = self.global_variables['tab_mode']
            if tab_mode == 'main':
                report_progress = self.report_main_progress
                save_experiment = self.save_main_experiment
            elif tab_mode == 'tuning':
                report_progress = self.report_tuning_progress
                save_experiment = self.save_tuning_experiment
            else:
                report_progress = self.report_comparison_progress
                save_experiment = self.save_comparison_experiment

            self.worker.progress.connect(report_progress)
            self.thread.start()
            self.worker.finished.connect(save_experiment)  # save results

            # Final resets
            self.startPushButton.setEnabled(False)
            self.thread.finished.connect(self.reset_values)

        except BaseException as err:
            msg = f"Unexpected {err=}, {type(err)=}"
            showCritical("Ocurrió un error inesperado al procesar el dato sísmico. Por favor, intente nuevamente o "
                         "utilice un dato diferente.", details=msg)
            self.experimentProgressBar.setValue(0)
            return

    def report_main_progress(self, iter, res_dict):
        self.experimentProgressBar.setValue(int((iter / self.maxiter) * 100))

        # update figure
        err = res_dict['hist'][iter, 0]
        psnr = np.round(res_dict['hist'][iter, 1], 3)
        ssim = np.round(res_dict['hist'][iter, 2], 3)

        iteration_list = self.state[self.global_variables['tab_mode']]['progress']['iteration']
        error_list = self.state[self.global_variables['tab_mode']]['progress']['error']
        psnr_list = self.state[self.global_variables['tab_mode']]['progress']['psnr']
        ssim_list = self.state[self.global_variables['tab_mode']]['progress']['ssim']

        iteration_list.append(iter)
        error_list.append(err)
        psnr_list.append(psnr)
        ssim_list.append(ssim)

        if iter % (self.maxiter // 10) == 0 or iter == self.maxiter:
            self.performanceGraphic.update_values(iteration_list, error_list, psnr_list, ssim_list)
            self.performanceGraphic.update_figure()

            self.reconstructionGraphic.update_report(
                dict(x_result=res_dict['result'], hist=res_dict['hist'], sampling=self.sampling_dict,
                     algorithm_name=self.algorithm_name))
            self.reconstructionGraphic.update_figure()

    def save_main_experiment(self, res_dict):
        performance_data = np.array(list(self.performanceGraphic.performance_data.items()), dtype=object)

        temp_saved = self.directories[self.global_variables['tab_mode']]['temp_saved']
        self.directories[self.global_variables['tab_mode']]['saved'] = temp_saved
        self.directories[self.global_variables['tab_mode']]['report'] = temp_saved
        np.savez(self.directories[self.global_variables['tab_mode']]['saved'],
                 x_result=res_dict['result'], hist=res_dict['hist'], sampling=self.sampling_dict,
                 algorithm_name=self.algorithm_name, performance_data=performance_data)
        print("Results saved [Ok]")

    def report_tuning_progress(self, num_run, res_dict, params):
        self.experimentProgressBar.setValue(int((num_run / self.total_num_run) * 100))

        # update figure
        data = {key: [float(value)] for key, value in params.items()}
        data['error'] = [res_dict['hist'][-1, 0]]
        data['psnr'] = [np.round(res_dict['hist'][-1, 1], 3)]
        data['ssim'] = [np.round(res_dict['hist'][-1, 2], 3)]

        if num_run == 1:
            self.tuning_data = pd.DataFrame(data)
        else:
            self.tuning_data = pd.concat([self.tuning_data, pd.DataFrame(data)])

        fixed_params = self.state[self.global_variables['tab_mode']]['progress']['fixed_params']
        self.tuningGraphic.update_tuning(self.algorithm_name.lower(), self.tuning_data, fixed_params,
                                         self.current_scale.lower())
        self.tuningGraphic.update_figure()

    def save_tuning_experiment(self):
        fixed_params = self.state[self.global_variables['tab_mode']]['progress']['fixed_params']
        fixed_params = np.array(list(fixed_params.items()), dtype=object)
        tuning_data = np.array(list(self.tuningGraphic.tuning_data.items()), dtype=object)

        temp_saved = self.directories[self.global_variables['tab_mode']]['temp_saved']
        self.directories[self.global_variables['tab_mode']]['saved'] = temp_saved
        self.directories[self.global_variables['tab_mode']]['report'] = temp_saved
        np.savez(self.directories[self.global_variables['tab_mode']]['saved'],
                 algorithm=self.algorithm_name, tuning_data=tuning_data, fixed_params=fixed_params,
                 scale=self.current_scale)
        print("Results saved [Ok]")

    def report_comparison_progress(self, iter, outputs):
        self.experimentProgressBar.setValue(int((iter / self.maxiter) * 100))

        # update figure
        errs, psnrs, ssims = [], [], []
        for output in outputs:
            errs.append(output['hist'][iter, 0])
            psnrs.append(np.round(output['hist'][iter, 1], 3))
            ssims.append(np.round(output['hist'][iter, 2], 3))

        iteration_list = self.state[self.global_variables['tab_mode']]['progress']['iteration']
        error_list = self.state[self.global_variables['tab_mode']]['progress']['errors']
        psnr_list = self.state[self.global_variables['tab_mode']]['progress']['psnrs']
        ssim_list = self.state[self.global_variables['tab_mode']]['progress']['ssims']

        iteration_list.append(iter)
        error_list.append(errs)
        psnr_list.append(psnrs)
        ssim_list.append(ssims)

        if iter % (self.maxiter // 10) == 0 or iter == self.maxiter:
            self.performanceGraphicComparison.update_values(iteration_list, error_list, psnr_list, ssim_list)
            self.performanceGraphicComparison.update_figure()

            x_results, hists = [], []
            for output in outputs:
                x_results.append(output['result'])
                hists.append(output['hist'])

            self.reconstructionGraphicComparison.update_report(
                dict(x_results=x_results, hist=hists, sampling=self.sampling_dict,
                     algorithm_name=self.algorithm_name))
            self.reconstructionGraphicComparison.update_figure()

    def save_comparison_experiment(self, res_dict):
        comparison_data = np.array(list(self.performanceGraphicComparison.comparison_data.items()), dtype=object)

        temp_saved = self.directories[self.global_variables['tab_mode']]['temp_saved']
        self.directories[self.global_variables['tab_mode']]['saved'] = temp_saved
        self.directories[self.global_variables['tab_mode']]['report'] = temp_saved
        np.savez(self.directories[self.global_variables['tab_mode']]['saved'],
                 x_results=res_dict['results'], hists=res_dict['hists'], sampling=self.sampling_dict,
                 comparison_data=comparison_data)
        print("Results saved [Ok]")

    def reset_values(self):
        self.startPushButton.setEnabled(True)
        self.experimentProgressBar.setValue(0)
        self.maxiter = 1
        self.worker = None
        self.thread = None
        self.sampling_dict = None

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("mainWindow", "ReDs - Universidad Industrial de Santander"))
        self.inputGroupBox.setTitle(_translate("mainWindow", "Datos sísmicos"))
        self.dataTreeWidget.headerItem().setText(0, _translate("mainWindow", "Datos actuales"))
        self.loadPushButton.setText(_translate("mainWindow", "Cargar"))
        self.algorithmGroupBox.setTitle(_translate("mainWindow", "Algoritmos"))
        self.algorithmComboBox.setItemText(0, _translate("mainWindow", "FISTA"))
        self.algorithmComboBox.setItemText(1, _translate("mainWindow", "GAP"))
        self.algorithmComboBox.setItemText(2, _translate("mainWindow", "TwIST"))
        self.algorithmComboBox.setItemText(3, _translate("mainWindow", "ADMM"))
        self.algorithmPushButton.setToolTip(_translate("mainWindow", "Ver ecuación"))
        self.maxiterLabel.setText(_translate("mainWindow", "Máxima iteración"))
        self.param1LineEdit.setText(_translate("mainWindow", "0.1"))
        self.param2LineEdit.setText(_translate("mainWindow", "0.3"))
        self.param3LineEdit.setText(_translate("mainWindow", "1"))
        self.tuningGroupBox.setTitle(_translate("mainWindow", "Ajuste de parámetros"))
        self.paramTuningLabel.setText(_translate("mainWindow", "Tipo"))
        self.paramTuningComboBox.setItemText(0, _translate("mainWindow", "Intervalo"))
        self.paramTuningComboBox.setItemText(1, _translate("mainWindow", "Lista"))
        self.paramLabel.setText(_translate("mainWindow", "Parámetro"))
        self.paramComboBox.setCurrentText(_translate("mainWindow", ""))
        self.paramComboBox.setItemText(0, _translate("mainWindow", ""))
        self.paramComboBox.setItemText(1, _translate("mainWindow", ""))
        self.paramComboBox.setItemText(2, _translate("mainWindow", ""))
        self.scaleLabel.setText(_translate("mainWindow", "Escala"))
        self.scaleComboBox.setItemText(0, _translate("mainWindow", "Lineal"))
        self.scaleComboBox.setItemText(1, _translate("mainWindow", "Logarítmica"))
        self.paramValuesLabel.setText(_translate("mainWindow", "Valores"))
        self.param1InitLineEdit.setText(_translate("mainWindow", "0.1"))
        self.param1EndLineEdit.setText(_translate("mainWindow", "1.0"))
        self.param2InitLineEdit.setText(_translate("mainWindow", "0.1"))
        self.param2EndLineEdit.setText(_translate("mainWindow", "1.0"))
        self.param3InitLineEdit.setText(_translate("mainWindow", "0.1"))
        self.param3EndLineEdit.setText(_translate("mainWindow", "1.0"))

        self.comparisonGroupBox.setTitle(_translate("mainWindow", "Comparaciones"))
        self.comparisonAlgorithmLabel.setText(_translate("mainWindow", "Algoritmos"))
        self.comparisonAlgorithmPushButton.setToolTip(_translate("mainWindow", "Ver ecuación"))
        self.comparisonMaxiterLabel.setText(_translate("mainWindow", "Máxima iteración"))
        self.fistaLabel.setText(_translate("mainWindow", "FISTA"))
        self.compParam1LineEdit1.setText(_translate("mainWindow", "2.9"))
        self.compParam2LineEdit1.setText(_translate("mainWindow", "0.4"))
        self.gapLabel.setText(_translate("mainWindow", "GAP"))
        self.compParam1LineEdit2.setText(_translate("mainWindow", "30.0"))
        self.twistLabel.setText(_translate("mainWindow", "TwIST"))
        self.compParam1LineEdit3.setText(_translate("mainWindow", "17.0"))
        self.compParam2LineEdit3.setText(_translate("mainWindow", "1.2"))
        self.compParam3LineEdit3.setText(_translate("mainWindow", "1.998"))
        self.admmLabel.setText(_translate("mainWindow", "ADMM"))
        self.compParam1LineEdit4.setText(_translate("mainWindow", "0.5"))
        self.compParam2LineEdit4.setText(_translate("mainWindow", "1.0"))
        self.compParam3LineEdit4.setText(_translate("mainWindow", "0.0005"))

        self.samplingGroupBox.setTitle(_translate("mainWindow", "Submuestreo"))
        self.samplingTypeLabel.setText(_translate("mainWindow", "Tipo"))
        self.samplingTypeComboBox.setItemText(0, _translate("mainWindow", "Aleatorio"))
        self.samplingTypeComboBox.setItemText(1, _translate("mainWindow", "Regular"))
        self.samplingTypeComboBox.setItemText(2, _translate("mainWindow", "Jitter"))
        self.samplingTypeComboBox.setItemText(3, _translate("mainWindow", "Lista"))
        self.compressLabel.setText(_translate("mainWindow", "Compresión"))
        self.compressSpinBox.setSuffix(_translate("mainWindow", "%"))
        self.elementLabel.setText(_translate("mainWindow", "Elementos"))
        self.seedCheckBox.setText(_translate("mainWindow", "Usar semilla"))
        self.seedLabel.setText(_translate("mainWindow", "Valor"))
        self.runGroupBox.setTitle(_translate("mainWindow", "Experimentos"))
        self.saveAsLabel.setText(_translate("mainWindow", "Guardar como"))
        self.resultGroupBox.setTitle(_translate("mainWindow", "Resultados"))
        self.resultLabel.setText(_translate("mainWindow", "Visualización"))
        self.performanceTabWidget.setTabText(self.performanceTabWidget.indexOf(self.expPerformanceTab1),
                                             _translate("mainWindow", "Experimento"))
        self.resultsToolBox.setItemText(self.resultsToolBox.indexOf(self.performancePage),
                                        _translate("mainWindow", "Rendimiento"))
        self.reportTabWidget.setTabText(self.reportTabWidget.indexOf(self.expReportTab1),
                                        _translate("mainWindow", "Experimento"))
        self.resultsToolBox.setItemText(self.resultsToolBox.indexOf(self.reportPage),
                                        _translate("mainWindow", "Reporte de reconstrucción"))
        self.tuningTabWidget.setTabText(self.tuningTabWidget.indexOf(self.expTuningReportTab1),
                                        _translate("mainWindow", "Experimento"))

        self.comparisonPerformanceTabWidget.setTabText(
            self.comparisonPerformanceTabWidget.indexOf(self.expComparisonPerformanceTab1),
            _translate("mainWindow", "Experimento"))
        self.comparisonsToolBox.setItemText(self.comparisonsToolBox.indexOf(self.comparisonPerformancePage),
                                            _translate("mainWindow", "Rendimiento"))
        self.comparisonReportTabWidget.setTabText(self.comparisonReportTabWidget.indexOf(self.expComparisonReportTab1),
                                                  _translate("mainWindow", "Experimento"))
        self.comparisonsToolBox.setItemText(self.comparisonsToolBox.indexOf(self.comparisonReportPage),
                                            _translate("mainWindow", "Reporte de reconstrucción"))

        self.toolBar.setWindowTitle(_translate("mainWindow", "toolBar"))
        self.aboutOfAction.setText(_translate("mainWindow", "about"))
        self.aboutOfAction.setToolTip(
            _translate("mainWindow", "<html><head/><body><p>Acerca de este proyecto</p></body></html>"))
        self.reportAction.setText(_translate("mainWindow", "report"))
        self.reportAction.setToolTip(_translate("mainWindow", "Visualización de resultados"))
        self.mainAction.setText(_translate("mainWindow", "main"))
        self.mainAction.setToolTip(_translate("mainWindow", "Ir al menú principal"))
        self.tuningAction.setText(_translate("mainWindow", "tuning"))
        self.tuningAction.setToolTip(_translate("mainWindow", "Ajuste de parámetros"))
        self.comparisonAction.setText(_translate("mainWindow", "comparison"))
        self.comparisonAction.setToolTip(
            _translate("mainWindow", "Hacer comparación de experimento con todos los algoritmos"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = UIMainWindow()

    qtRectangle = MainWindow.frameGeometry()
    centerPoint = QtWidgets.QDesktopWidget().availableGeometry().center()
    qtRectangle.moveCenter(centerPoint)
    MainWindow.move(qtRectangle.topLeft())
    enterPoint = QtWidgets.QDesktopWidget().availableGeometry().center()
    qtRectangle.moveCenter(centerPoint)
    MainWindow.move(qtRectangle.topLeft())

    MainWindow.show()
    sys.exit(app.exec_())
